<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ritarma</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-15T14:59:25.489Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ritarma Arthur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>金融风控比赛项目任务一赛题理解</title>
    <link href="http://yoursite.com/2020/09/15/DW%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7%E6%AF%94%E8%B5%9B%E9%A1%B9%E7%9B%AE%E4%BB%BB%E5%8A%A1%E4%B8%80%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/09/15/DW金融风控比赛项目任务一赛题理解/</id>
    <published>2020-09-15T14:58:31.797Z</published>
    <updated>2020-09-15T14:59:25.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DW金融风控比赛项目任务一赛题理解"><a href="#DW金融风控比赛项目任务一赛题理解" class="headerlink" title="DW金融风控比赛项目任务一赛题理解"></a>DW金融风控比赛项目任务一赛题理解</h1><p>天池的入门赛：<a href="https://tianchi.aliyun.com/competition/entrance/531830/introduction" target="_blank" rel="noopener">https://tianchi.aliyun.com/competition/entrance/531830/introduction</a></p><p>该数据来自某信贷平台的贷款记录，总数据量超过120w，包含47列变量信息，其中15列为匿名变量。为了保证比赛的公平性，将会从中抽取80万条作为训练集，20万条作为测试集A，20万条作为测试集B</p><p>数据内容</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>Field</strong></th><th style="text-align:center"><strong>Description</strong></th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">为贷款清单分配的唯一信用证标识</td></tr><tr><td style="text-align:center">loanAmnt</td><td style="text-align:center">贷款金额</td></tr><tr><td style="text-align:center">term</td><td style="text-align:center">贷款期限（year）</td></tr><tr><td style="text-align:center">interestRate</td><td style="text-align:center">贷款利率</td></tr><tr><td style="text-align:center">installment</td><td style="text-align:center">分期付款金额</td></tr><tr><td style="text-align:center">grade</td><td style="text-align:center">贷款等级</td></tr><tr><td style="text-align:center">subGrade</td><td style="text-align:center">贷款等级之子级</td></tr><tr><td style="text-align:center">employmentTitle</td><td style="text-align:center">就业职称</td></tr><tr><td style="text-align:center">employmentLength</td><td style="text-align:center">就业年限（年）</td></tr><tr><td style="text-align:center">homeOwnership</td><td style="text-align:center">借款人在登记时提供的房屋所有权状况</td></tr><tr><td style="text-align:center">annualIncome</td><td style="text-align:center">年收入</td></tr><tr><td style="text-align:center">verificationStatus</td><td style="text-align:center">验证状态</td></tr><tr><td style="text-align:center">issueDate</td><td style="text-align:center">贷款发放的月份</td></tr><tr><td style="text-align:center">purpose</td><td style="text-align:center">借款人在贷款申请时的贷款用途类别</td></tr><tr><td style="text-align:center">postCode</td><td style="text-align:center">借款人在贷款申请中提供的邮政编码的前3位数字</td></tr><tr><td style="text-align:center">regionCode</td><td style="text-align:center">地区编码</td></tr><tr><td style="text-align:center">dti</td><td style="text-align:center">债务收入比</td></tr><tr><td style="text-align:center">delinquency_2years</td><td style="text-align:center">借款人过去2年信用档案中逾期30天以上的违约事件数</td></tr><tr><td style="text-align:center">ficoRangeLow</td><td style="text-align:center">借款人在贷款发放时的fico所属的下限范围</td></tr><tr><td style="text-align:center">ficoRangeHigh</td><td style="text-align:center">借款人在贷款发放时的fico所属的上限范围</td></tr><tr><td style="text-align:center">openAcc</td><td style="text-align:center">借款人信用档案中未结信用额度的数量</td></tr><tr><td style="text-align:center">pubRec</td><td style="text-align:center">贬损公共记录的数量</td></tr><tr><td style="text-align:center">pubRecBankruptcies</td><td style="text-align:center">公开记录清除的数量</td></tr><tr><td style="text-align:center">revolBal</td><td style="text-align:center">信贷周转余额合计</td></tr><tr><td style="text-align:center">revolUtil</td><td style="text-align:center">循环额度利用率，或借款人使用的相对于所有可用循环信贷的信贷金额</td></tr><tr><td style="text-align:center">totalAcc</td><td style="text-align:center">借款人信用档案中当前的信用额度总数</td></tr><tr><td style="text-align:center">initialListStatus</td><td style="text-align:center">贷款的初始列表状态</td></tr><tr><td style="text-align:center">applicationType</td><td style="text-align:center">表明贷款是个人申请还是与两个共同借款人的联合申请</td></tr><tr><td style="text-align:center">earliesCreditLine</td><td style="text-align:center">借款人最早报告的信用额度开立的月份</td></tr><tr><td style="text-align:center">title</td><td style="text-align:center">借款人提供的贷款名称</td></tr><tr><td style="text-align:center">policyCode</td><td style="text-align:center">公开可用的策略_代码=1新产品不公开可用的策略_代码=2</td></tr><tr><td style="text-align:center">n系列匿名特征</td><td style="text-align:center">匿名特征n0-n14，为一些贷款人行为计数特征的处理</td></tr></tbody></table></div><p>提交结果为每个测试样本是1的概率，也就是y为1的概率。评价方法为AUC评估模型效果</p><h3 id="评级标准："><a href="#评级标准：" class="headerlink" title="评级标准："></a>评级标准：</h3><h4 id="AUC-Area-Under-Curve"><a href="#AUC-Area-Under-Curve" class="headerlink" title="AUC(Area Under Curve)"></a>AUC(Area Under Curve)</h4><p>AUC（Area Under Curve）被定义为 ROC曲线 下与坐标轴围成的面积，显然这个面积的数值不会大于1。又由于ROC曲线一般都处于y=x这条直线的上方，所以AUC的取值范围在0.5和1之间。AUC越接近1.0，检测方法真实性越高;等于0.5时，则真实性最低，无应用价值。</p><h4 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h4><p>ROC空间将假正例率（FPR）定义为 X 轴，真正例率（TPR）定义为 Y 轴。</p><script type="math/tex; mode=display">T P R=\frac{T P}{T P+F N}</script><p>TPR：在所有实际为正例的样本中，被正确地判断为正例之比率。</p><script type="math/tex; mode=display">F P R=\frac{F P}{F P+T N}</script><p>FPR：在所有实际为负例的样本中，被错误地判断为正例之比率。</p><script type="math/tex; mode=display">\text {Recall}=\frac{T P}{T P+F N}</script><p>召回率又称为查全率，正确预测为正样本（TP）占正样本(TP+FN)的百分比</p><script type="math/tex; mode=display">\text { Precision }=\frac{T P}{T P+F P}</script><p>准确率就是判断为准确的所有样本中，到底多少个是真的对的</p><p>ROC曲线和PR曲线的区别在与x，y轴不同，ROC的y轴是TPR 就是召回率，但是x轴是FPR表示错误判断占所有负样本的比例</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200915225404914.png" alt="image-20200915225404914"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DW金融风控比赛项目任务一赛题理解&quot;&gt;&lt;a href=&quot;#DW金融风控比赛项目任务一赛题理解&quot; class=&quot;headerlink&quot; title=&quot;DW金融风控比赛项目任务一赛题理解&quot;&gt;&lt;/a&gt;DW金融风控比赛项目任务一赛题理解&lt;/h1&gt;&lt;p&gt;天池的入门赛：&lt;a 
      
    
    </summary>
    
    
      <category term="datawhale， RiskControl" scheme="http://yoursite.com/tags/datawhale%EF%BC%8C-RiskControl/"/>
    
  </entry>
  
  <entry>
    <title>查找 2</title>
    <link href="http://yoursite.com/2020/08/27/%E6%9F%A5%E6%89%BE2/"/>
    <id>http://yoursite.com/2020/08/27/查找2/</id>
    <published>2020-08-27T10:33:45.474Z</published>
    <updated>2020-08-27T10:34:21.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找2"><a href="#查找2" class="headerlink" title="查找2"></a>查找2</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></h2><p>简单题</p><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>暴力法O（N^2）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span> , len(nums), <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] == target - nums[i]:</span><br><span class="line">                <span class="keyword">return</span> [i , j]</span><br></pre></td></tr></table></figure><p>使用哈希表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">hash_tab = &#123;&#125;</span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">           <span class="keyword">if</span> target - nums[i] <span class="keyword">in</span> hash_tab.keys():</span><br><span class="line">               <span class="keyword">return</span> [i, hash_tab[target - nums[i]]]</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               hash_tab[nums[i]] = i</span><br></pre></td></tr></table></figure><p>如果返回的不是键值，而是对应的结果，可以用</p><p>排序+双指针</p><p>首先可以先排序，此时的数组是从小到大的，使用两个指针，分别从前后两个方向上去找</p><p>单步： </p><ol><li>前指针的数值求补数，直到后指针找到</li><li>找到以后，前指针向后，后指针向前</li><li>如果发现数值已经大于该数字，结束后指针查找，重新开始前指针后移</li></ol><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">15. 三数之和</a></h2><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p>此题虽然合上述的问题相似，但是没有利用哈希表来做了，因为哈希表利用了哈希的程序便利性，使用排序加双指针会更好</p><ol><li>首先求的和是0，当从小到大排序完成后，第一个数字必须是小于0的，如果大于0说明已经结束了</li><li>此时双指针一个从上一个循环的值开始（pre），一个从数组尾端开始（end）</li><li>两个while 同时逼近，target = -nums[i] - nums[pre]首先先动后面的，如果小于taget，跳出，前指针后移，如果大于，后指针前移查找直到相等，或者前后指针相同</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">    res = []</span><br><span class="line">    nums.sort()</span><br><span class="line">    target = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        pre = i + <span class="number">1</span></span><br><span class="line">        end = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pre &lt; end:</span><br><span class="line">            sum = nums[end] + nums[pre]</span><br><span class="line">            <span class="keyword">if</span> -nums[i] &gt; sum:</span><br><span class="line">                pre += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> -nums[i] &lt; sum:</span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> -nums[i] == sum:</span><br><span class="line">                res.append([nums[i], nums[pre], nums[end]])</span><br><span class="line">                pre += <span class="number">1</span></span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> pre &lt; end <span class="keyword">and</span> nums[pre] == nums[pre - <span class="number">1</span>]:</span><br><span class="line">                    pre += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> pre &lt; end <span class="keyword">and</span> nums[end] == nums[end + <span class="number">1</span>]:</span><br><span class="line">                    end -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">16. 最接近的三数之和</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,2,1,-4], target = 1</span><br><span class="line">输出：2</span><br><span class="line">解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</span><br></pre></td></tr></table></figure><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案</p><ol><li>先排序，第一个是最小的i，</li><li>然后往后查找，如果三个数字和等于target就返回，如果大于，说明可以end调小一点， 如果小于说明可以pre调大一点</li><li>每一次运算完检测差的绝对值是否变小了，如果变小了就记录当前的总和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">    nums.sort()</span><br><span class="line">    temp = nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>]</span><br><span class="line">    res = abs(nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>] - target)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        pre = i + <span class="number">1</span></span><br><span class="line">        end = len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> pre &lt; end:</span><br><span class="line">            t_sum = nums[pre] + nums[i] + nums[end]</span><br><span class="line">            <span class="keyword">if</span> t_sum == target:</span><br><span class="line">                <span class="keyword">return</span> target</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> abs(target - t_sum) &lt; res:</span><br><span class="line">                    res = abs(target - t_sum)</span><br><span class="line">                    temp = t_sum</span><br><span class="line">            <span class="keyword">if</span> t_sum &lt; target:</span><br><span class="line">                pre += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><p>92 ms, 在所有 Python3 提交中击败了94.96%的用户</p><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/" target="_blank" rel="noopener">18. 四数之和</a></h2><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</span><br><span class="line"></span><br><span class="line">满足要求的四元组集合为：</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>和三数字之和很类似，应该是在之前的上面增加一个循环</p><p>由于输出的是数字组合，用排序和双指针实现，首先是排序，确定第一个最小的值，然后确定第二小的值，剩下两个双指针走</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[List[int]]:</span></span><br><span class="line">    res = []</span><br><span class="line">    nums.sort()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums) - <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums)<span class="number">-2</span>, <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> j &gt; i+<span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j<span class="number">-1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            pre = j + <span class="number">1</span></span><br><span class="line">            end = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> pre &lt; end:</span><br><span class="line">                sum = nums[end] + nums[pre] +  nums[i] + nums[j]</span><br><span class="line">                <span class="keyword">if</span> target &gt; sum:</span><br><span class="line">                    pre += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> target &lt; sum:</span><br><span class="line">                    end -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> target == sum:</span><br><span class="line">                    res.append([nums[i], nums[j], nums[pre], nums[end]])</span><br><span class="line">                    pre += <span class="number">1</span></span><br><span class="line">                    end -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> pre &lt; end <span class="keyword">and</span> nums[pre] == nums[pre - <span class="number">1</span>]:</span><br><span class="line">                        pre += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> pre &lt; end <span class="keyword">and</span> nums[end] == nums[end + <span class="number">1</span>]:</span><br><span class="line">                        end -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>由于是N^3的复杂度，速度还是很慢的，可以提前考虑一些极端情况优化下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查找2&quot;&gt;&lt;a href=&quot;#查找2&quot; class=&quot;headerlink&quot; title=&quot;查找2&quot;&gt;&lt;/a&gt;查找2&lt;/h1&gt;&lt;h2 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和&quot;&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>查找 1</title>
    <link href="http://yoursite.com/2020/08/25/%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2020/08/25/查找/</id>
    <published>2020-08-25T14:56:28.472Z</published>
    <updated>2020-08-26T01:57:20.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/" target="_blank" rel="noopener">349. 两个数组的交集</a></h2><p>利用set的不重复性，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(self, nums1: List[int], nums2: List[int])</span></span></span><br><span class="line">    set1 = set(nums1)</span><br><span class="line">    set2 = set(nums2)</span><br><span class="line">    <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> set1 <span class="keyword">if</span> i <span class="keyword">in</span> set2]</span><br></pre></td></tr></table></figure><p>62 ms</p><p>也可以直接使用set的求交符号，但是底层实现类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">intersection</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> </span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">set</span><span class="params">(nums1)</span>&amp;<span class="title">set</span><span class="params">(nums2)</span></span></span><br></pre></td></tr></table></figure><p>84 ms</p><h2 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">350. 两个数组的交集 II</a></h2><p>增加了次数的要求，此时就需要一个计数表，使用Counter简单实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def intersect(self, nums1: List[int], nums2: List[int]) -&gt; List[int]:</span><br><span class="line">    res = []</span><br><span class="line">    from collections import Counter</span><br><span class="line">    cnt1 = Counter(nums1)</span><br><span class="line">    for i in nums2:</span><br><span class="line">        if cnt1[i] &gt; 0:</span><br><span class="line">            res.append(i)</span><br><span class="line">            cnt1[i] -= 1</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure><p>时间 88 ms 有点慢， 复杂度是O（M+N）的</p><p>为什么很慢在提示给出了，nums1很小，nums2很大，所以可以稍微加一句<code>if len(nums1) &lt; len(nums2): nums2, nums1 = nums1, nums2</code> 让conter执行较长的，循环较小的，速度比较稳定在60 ms</p><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure><p><strong>定义</strong>： 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。如果 <strong>可以变为</strong> 1，那么这个数就是快乐数。</p><p>题目的建模过程是简单的，分开然后求平方和，不为1就继续，需要判断的是，在发生始终变不到1的情况下，如何及时跳出。而且每一各数字对应的下一个数字都是绝对的，是一个链表一样的情况。</p><p>仔细思考可以发现，一个数字的平凡和结果最后是不可能溢出的，那么这个while循环的结果只有两种，变成了1，或者变成了之前的数字，导致有环</p><p>用一个set来记录之前出现过的数字，一直迭代下去，如果是出现了重复的数字就是环，返回False就行，这样代码就很简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n: int)</span> -&gt; bool:</span></span><br><span class="line">    num_table = set()</span><br><span class="line">    <span class="keyword">while</span> n &gt;= <span class="number">1</span> <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> num_table:</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        num_table.add(n)</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            n, mod = divmod(n, <span class="number">10</span>)</span><br><span class="line">            sum += mod ** <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> sum == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = sum</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="290-单词规律"><a href="#290-单词规律" class="headerlink" title="290. 单词规律"></a><a href="https://leetcode-cn.com/problems/word-pattern/" target="_blank" rel="noopener">290. 单词规律</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: pattern = &quot;abba&quot;, str = &quot;dog cat cat dog&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p> <strong>遵循</strong> 指完全匹配，例如， <code>pattern</code> 里的每个字母和字符串 <code>str</code> 中的每个非空单词之间存在着双向连接的对应规律</p><p>很明显的映射关系，只要一个个匹配就行，对pattern中的每个a,b,c 都存放在一个dict，a对应的是dog</p><div class="table-container"><table><thead><tr><th style="text-align:center">pattern</th><th style="text-align:center">str_list</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">dog</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">cat</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">apple</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordPattern</span><span class="params">(self, pattern: str, str: str)</span> -&gt; bool:</span></span><br><span class="line">   str_list = str.split(<span class="string">' '</span>)</span><br><span class="line">   <span class="keyword">if</span> len(pattern) != len(str_list):</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   hash_table = &#123;&#125;</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(len(pattern)):</span><br><span class="line">       <span class="keyword">if</span> pattern[i] <span class="keyword">not</span> <span class="keyword">in</span> hash_table.keys():</span><br><span class="line">           <span class="keyword">if</span> str_list[i] <span class="keyword">in</span> hash_table.values():</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               hash_table[pattern[i]] = str_list[i]</span><br><span class="line">       <span class="keyword">elif</span> hash_table[pattern[i]] != str_list[i]:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>算法时间 40 ms 复杂度是O（N）级别</p><h2 id="451-根据字符出现频率排序"><a href="#451-根据字符出现频率排序" class="headerlink" title="451. 根据字符出现频率排序"></a><a href="https://leetcode-cn.com/problems/sort-characters-by-frequency/" target="_blank" rel="noopener">451. 根据字符出现频率排序</a></h2><p>这个就是典型的排序加哈希表题，哈希表存储每个字符的出现次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">&apos;c&apos;和&apos;a&apos;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span><br><span class="line">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span><br></pre></td></tr></table></figure><p>采用Counter 来计数，喜欢自己写的也可以用dict实现，效率没有太大区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">frequencySort</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    s1 = Counter(s)</span><br><span class="line"></span><br><span class="line">    s2 = sorted(s1.items(),key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> s2:</span><br><span class="line">        res += key*value</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>执行时间 40 ms</p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/" target="_blank" rel="noopener">242. 有效的字母异位词</a></h2><p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>满足字符串的长度，字母出现的次数一致即可，那还是用两个Counter来实现应该最为简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> t <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">    cnt1 = Counter(s)</span><br><span class="line">    cnt2 = Counter(t)</span><br><span class="line">    char_tab = cnt2.keys()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> cnt1.keys():</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> char_tab:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> cnt2[char] != cnt1[char]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>时间：44 ms, 在所有 Python3 提交中击败了96.13%的用户</p><h2 id="205-同构字符串"><a href="#205-同构字符串" class="headerlink" title="205. 同构字符串"></a><a href="https://leetcode-cn.com/problems/isomorphic-strings/" target="_blank" rel="noopener">205. 同构字符串</a></h2><p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p><p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身</p><p>这个题和上面的单词规律是一样，都检查映射关系是否正确：</p><p>一个非常python 的写法是</p><p>map(s.index, s) == map(t.index, t)</p><p>由于返回的是map的对象，没有实现 == 运算符重载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isIsomorphic</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(s.index,s)) == list(map(t.index,t))</span><br></pre></td></tr></table></figure><h2 id="540-有序数组中的单一元素"><a href="#540-有序数组中的单一元素" class="headerlink" title="540. 有序数组中的单一元素"></a><a href="https://leetcode-cn.com/problems/single-element-in-a-sorted-array/" target="_blank" rel="noopener">540. 有序数组中的单一元素</a></h2><p>一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,1,2,3,3,4,4,8,8]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>如果全都是两个的，那么肯定num[奇数] == nums[偶数]，由于只有一个，导致后面发生变化，每一次取一个mid，来缩短查询距离，如果mid是偶数，那么和1异或的话，那么得到的是mid+1，如果mid是奇数，得到的是mid-1。如果相等的话，那么唯一的元素还在这之后，往后找就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def singleNonDuplicate(self, nums):</span><br><span class="line">        lo, hi = 0, len(nums) - 1</span><br><span class="line">        while lo &lt; hi:</span><br><span class="line">            mid = (lo + hi) // 2</span><br><span class="line">            if nums[mid] == nums[mid ^ 1]:</span><br><span class="line">                lo = mid + 1</span><br><span class="line">            else:</span><br><span class="line">                hi = mid</span><br><span class="line">        return nums[lo]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h1&gt;&lt;h2 id=&quot;349-两个数组的交集&quot;&gt;&lt;a href=&quot;#349-两个数组的交集&quot; class=&quot;headerlink&quot; title=&quot;349
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://yoursite.com/2020/08/22/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2020/08/22/动态规划/</id>
    <published>2020-08-22T07:33:28.853Z</published>
    <updated>2020-08-23T16:04:36.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划：结合了分治思想和回溯思想的一种动态解决子问题的方法，本质是一个问题由多个子问题组合</p><p>WHY：相对于朴素解法，由于可以利用子问题的结果来简化下一子问题的计算，计算复杂度的提升巨大，同时采用了类似回溯的方法来剪枝</p><p>HOW：使用DP 需要有一个状态转移的概念，不一定要非常格式化的按照DP的状态转移方程来思考，但是得有状态转移的一个列表</p><h2 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300. 最长上升子序列"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">300. 最长上升子序列</a></h2><p>本题相对最长连续子序列减少了连续的条件，由于有多种组合导致回溯的情况问题的时间复杂度预计应该是在O（NlogN）， 是典型的数组问题，使用指针的思维实现</p><p>如果存在一个最优子序列，那么包含该seq的所有seq（不超过原序列）的最优解都是这个seq的长度</p><pre><code>### 单步</code></pre><p> 思考一个单步过程，对每一个数字，都查找以后的是否有比这个数字大的，如果有说明存在以这个数字开头的上升序列，更新子序列最大的数字，但是这个最大数字并非是最优的，可能存在一个比这个最大数字小，但是比上一个的数字大的，例如【2，5，4，3，。。】此时子序列的最大数字应该是3而不是5</p><p>遍历完可以找到一个子序列，计算长度就可以了。这个算法的计算复杂度是N^2</p><p>可以简单的写一个伪代码，了解题目意思;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">    max_len = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> max_len</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        tmp_max_num = nums[i]</span><br><span class="line">        tmp_max_num2 = nums[i]</span><br><span class="line">        res = []</span><br><span class="line">        res.append(tmp_max_num)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums), <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; tmp_max_num:</span><br><span class="line">                tmp_max_num2 = tmp_max_num</span><br><span class="line">                tmp_max_num = nums[j]</span><br><span class="line">                res.append(nums[j])</span><br><span class="line">                <span class="keyword">elif</span> nums[j] &gt; tmp_max_num2:</span><br><span class="line">                    res.remove(tmp_max_num)</span><br><span class="line">                    res.append(nums[j])</span><br><span class="line">                    tmp_max_num = nums[j]</span><br><span class="line">max_len = max(max_len, len(res))</span><br><span class="line"><span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure><p>这个算法N2 的复杂度，时间是1044ms</p><p>思考一个更优化的的动态规划算法单步执行，对于数字的分治方法，都是将一个长的数组转化为多个小数组（子序列），并将子问题的答案存在一个dp[]中，然后对这个dp数组处理得到result</p><p>再优化一下，由于原数组很长，但是维护的res数组很短，而且反复申请空间消耗的时间很长，干脆每一次遍历的时候都找一下有序数组res里面有没有比这个数字更大的数字，如果没有就说明这个是子序列的最大值，有就替换一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> <span class="keyword">not</span> len(nums):</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">       records = []</span><br><span class="line">       records.append(nums[<span class="number">0</span>])</span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">           <span class="keyword">if</span> nums[i]&gt;records[<span class="number">-1</span>]:</span><br><span class="line">               records.append(nums[i])</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               j = len(records)<span class="number">-1</span></span><br><span class="line">               <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">                   <span class="keyword">if</span> records[j]&gt;=nums[i]:</span><br><span class="line">                       j-=<span class="number">1</span></span><br><span class="line">                   <span class="keyword">else</span>:</span><br><span class="line">                       <span class="keyword">break</span></span><br><span class="line">               records[j+<span class="number">1</span>]=nums[i]</span><br><span class="line">       <span class="keyword">return</span> len(records)</span><br></pre></td></tr></table></figure><p>时间50ms</p><h2 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674. 最长连续递增序列"></a><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" target="_blank" rel="noopener">674. 最长连续递增序列</a></h2><p>这个问题相对上一个更加简单，遍历就完事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findLengthOfLCIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="literal">None</span> : <span class="keyword">return</span> max_len</span><br><span class="line">        <span class="keyword">if</span> len(nums) &gt; <span class="number">1</span> :</span><br><span class="line">            max_len += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        max_all = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i<span class="number">-1</span>]:</span><br><span class="line">                max_len += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_len = <span class="number">1</span></span><br><span class="line">            max_all = max(max_all, max_len)</span><br><span class="line">        <span class="keyword">return</span> max_all</span><br></pre></td></tr></table></figure><p>用上动态规划，就是把每一回找到的连续数组的长度用一个dp【】来保存，此时对于每一个子序列都求一个最大长度，求解每一个，但是这个小问题有点浪费内存</p><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title=" 5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener"> 5. 最长回文子串</a></h2><p>DP经典问题，题目还是子序列的求最优化的问题，一般都有多项式级别的暴力解，子序列不同的序列头和序列尾可以生成<code>n(n-1)/2</code>个子序列，只要对每个子序列判断一次是否回文即可</p><p>分析一个序列判断回文的单步：</p><p>1， 分析是否头尾相同</p><p>2， 然后while 逐步分析两段是否相同</p><p>3，直到两个指针指向同一个或者只相差1个位置结束</p><p>暴力算法的复杂度是N^3，考虑使用动态规划来简化</p><p>可以定义一个<code>dp[i][j]</code>为一个从位置<code>i</code>到位置<code>j</code>的一个子序列是否是回文。</p><p>这个看起来是很简单的过程，但是问题其实可以思考到每一个子序列存在相关性，字串不是回文，那么父亲序列绝对不是回文，但是一个子序列若是回文，那它的下一位父亲序列<code>s[i-1]到[j+1]</code>还要判断多出来的<code>s[i-1] == [j+1]</code>就知道是不是回文了，这就是一个递推的一个状态过程</p><p> 不断的找序列然后找到j-i 最大的那个存在回文的序列即是最长的回文子串</p><p>分析一个单步过程：</p><p>对于每一个子串i， j=i+n, (n)表示长度为n， n必须满足小于总长len-i-1</p><ol><li>如果n==0 表示只有字串一位肯定是满足的，n==1, 判断是否<code>s[i]==s[j]</code>相等就是<code>aa</code>这种情况，也是满足的</li><li>如果都不满足说明，长度超过1了，那么需要判断它的字串的状态<code>dp[i+1][j-1]</code>和<code>s[i]==s[j]</code> 两者同时成立才可以。</li><li>如果上一条的情况都成立，说明新父亲串是一个回文，此时判断长度是否大于当前最大的回文串是否要更新就行</li></ol><p>最后返回最长串的回文字符串</p><p>运行时间：4644ms</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        len_s = len(s)</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * len_s <span class="keyword">for</span> _ <span class="keyword">in</span> range(len_s)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len_s<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(len_s - i):</span><br><span class="line">                j = i+n</span><br><span class="line">                <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">                    dp[i][j] = <span class="literal">True</span> <span class="keyword">if</span> s[i] == s[j] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = (dp[i+<span class="number">1</span>][j<span class="number">-1</span>] <span class="keyword">and</span> s[i] == s[j])</span><br><span class="line">                <span class="keyword">if</span> dp[i][j] <span class="keyword">and</span> n+<span class="number">1</span> &gt; max_len:</span><br><span class="line">                    max_len = n+<span class="number">1</span></span><br><span class="line">                    res = s[i:j+<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>速度很慢，主要字符串的长度太长，可以采用Manacher 优化到o(N) 有空自再思考</p><h2 id="516-最长回文子序列"><a href="#516-最长回文子序列" class="headerlink" title="516. 最长回文子序列"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">516. 最长回文子序列</a></h2><p>   相比于上题，减少了连续的条件，此时生成的回文可以不用连续，子序列的数量没有增加，但是要判断的内容变化了， 之前是一次两步长的判断，现在是一次左右可以多步</p><p>使用DP的方法，矩阵的数量可以不用改变，但是状态转换的递归条件发生了变化</p><p>   之前是只判断子序列是否为回文，由于序列的最大回文存在，数量肯定是在最长的序列</p><p>​    <strong>此时DP矩阵中存储的是数值， 表示此时子序列（问题）的最大回文长度</strong></p><p><strong>状态转移过程</strong>：如果满足<code>s[i]==s[j]</code>（‘abba’） 此时的序列相对于<code>dp[i+1][j-1]</code>对应的序列（‘bb’）多两个长度，</p><p>​    如果不满足条件（‘abbc’）此时的序列就是比较子序列<code>dp[i][j-1]</code>（‘abb’）和<code>dp[i+1][j]</code>（‘bbc’）两个谁更大，如果都一样，说明增加的没有区别，不一样说明长度增加了，需要注意要从右下角开始往上遍历，因为每次都需要利用的子序列位于矩阵的左下脚<code>dp[i + 1][j - 1]</code>，左边<code>dp[i][j - 1]</code>，下边<code>dp[i+1][j]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindromeSubseq</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        len_s = len(s)</span><br><span class="line">        dp = [[<span class="number">0</span>] * len_s <span class="keyword">for</span> _ <span class="keyword">in</span> range(len_s)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len_s):</span><br><span class="line">            dp[i][i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len_s, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len_s):</span><br><span class="line">                <span class="comment"># print(s[i:j+1])</span></span><br><span class="line">                <span class="keyword">if</span> s[i] == s[j]:</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(dp[i][j - <span class="number">1</span>], dp[i + <span class="number">1</span>][j])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>运行时间1512 ms</p><h2 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode-cn.com/problems/edit-distance/" target="_blank" rel="noopener">72. 编辑距离</a></h2><p>DP中较难的题，编辑距离又叫levenshtein长度，在字符串匹配库，搜索引擎elastic search内都有应用，复杂度最低应该O（mn），表示至少每个字符都对比一下，一般使用C实现库再调用</p><p>存在三种方法编辑，编辑距离为1的情况是<code>len*(2+26)</code>， 能编辑的字符串数量是指数增长的，暴力法就不太可能实现了</p><p>一个初步的思考是编辑距离为2的序列中间过程应该是由距离为1的再来了一次距离为1的过程，这应该要用递归来做</p><p>思考word1 和word2 可能有子问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ho -&gt; roho -&gt; ros ho -&gt; rose</span><br><span class="line">hor -&gt; roshor -&gt; rose</span><br><span class="line">hors -&gt; rose</span><br><span class="line">horse -&gt; rose</span><br></pre></td></tr></table></figure><p>但是这个开头都是固定的，但是很明显开头和结尾都不是固定的，像or-&gt; ro这样的子问题也可能出现</p><p>可以设置<code>dp[i][j]</code>表示字符长度为<code>i</code>的字符串和长度为<code>j</code>的字符串的最短编辑距离，那对于一个单步过程，如果<code>dp[i][i]</code>是0时，说明第i个前面都是一样的</p><ol><li>判断s1[i+1]和s2[j+1]是否相等，如果相等说明两个指针各进一步不影响结果</li><li>如果不等就需要判断这一次的状态改变是如何导致<code>dp[i+1][j+1]</code>变化</li><li>判断<strong>插入</strong>操作，当我们在word1中插入一个和word2一样的字符，那么word2就被匹配了，所以可以直接表示为<code>dp[i][j-1]+1</code> 对于<strong>删除</strong>操作，直接表示为<code>dp[i-1][j]+1</code> 对于<strong>替换</strong>操作，直接表示为<code>dp[i-1][j-1]+1</code> 所以下一个状态就是min（三者）</li></ol><p>最后输出结果就是<code>dp[m][n]</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1, word2)</span>:</span></span><br><span class="line">        m=len(word1) </span><br><span class="line">        n=len(word2)</span><br><span class="line">        dp=[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="comment">#空字符串的初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>):</span><br><span class="line">            dp[<span class="number">0</span>][i]=i </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(m+<span class="number">1</span>):</span><br><span class="line">            dp[j][<span class="number">0</span>]=j </span><br><span class="line">        <span class="comment"># 每一次一个指针走一步    </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>): </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>]==word2[j<span class="number">-1</span>]: </span><br><span class="line">                    dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">#不同情况递归求下一个状态，分治思想</span></span><br><span class="line">                    dp[i][j]=min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span> </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>运行时间200 ms</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;p&gt;动态规划：结合了分治思想和回溯思想的一种动态解决子问题的方法，本质是一个问题由多个子问题组合&lt;/p&gt;
&lt;p&gt;WHY：相对于朴
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>分治算法</title>
    <link href="http://yoursite.com/2020/08/17/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/08/17/分治算法/</id>
    <published>2020-08-17T12:12:38.282Z</published>
    <updated>2020-08-17T12:14:35.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分治算法："><a href="#分治算法：" class="headerlink" title="分治算法："></a>分治算法：</h1><p>what: 是一个将母问题分为<strong>相同</strong>子问题来简化计算的算法</p><p>How: 基本有三步， </p><ol><li>将问题转化为相同的小问题</li><li>递归解相同的小问题</li><li>将上述小问题的结果综合并返回</li></ol><p>Why:</p><p>​        主要是重复利用堆栈，效率上的提升主要是针对计算数量级逐级快速递增的，解决的问题主要是计算量大</p><h3 id="POW-X-n"><a href="#POW-X-n" class="headerlink" title="POW(X,n)"></a>POW(X,n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">        <span class="comment"># 数据预处理</span></span><br><span class="line">        res = <span class="number">1.0</span> </span><br><span class="line">        <span class="keyword">if</span> n ==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            x = <span class="number">1</span> /x</span><br><span class="line">            n = -n </span><br><span class="line">        <span class="comment"># 问题划分</span></span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            res = self.myPow(x*x, n/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res1 = self.myPow(x, n<span class="number">-1</span>)</span><br><span class="line">            <span class="comment"># 集合所有的结果</span></span><br><span class="line">            res = res1*x</span><br><span class="line">            <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    从解决问题的角度，算法只用</p><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">    <span class="comment"># 数据预处理</span></span><br><span class="line">    res = <span class="number">1.0</span> </span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        x = <span class="number">1</span> /x</span><br><span class="line">        n = -n </span><br><span class="line">    <span class="comment"># 问题划分</span></span><br><span class="line">    res1 = self.myPow(x, n<span class="number">-1</span>)</span><br><span class="line">    <span class="comment"># 集合所有的结果</span></span><br><span class="line">    res = res1*x</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>但是会导致一个问题</p><p>​    递归的栈爆了，采取稍微减少点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">    <span class="comment"># 数据预处理</span></span><br><span class="line">    res = <span class="number">1.0</span> </span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>/x</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        x = <span class="number">1</span> /x</span><br><span class="line">        n = -n </span><br><span class="line">    <span class="comment"># 问题划分</span></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res = self.myPow(x*x, n//<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res1 = self.myPow(x*x, (n<span class="number">-1</span>)//<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 集合所有的结果</span></span><br><span class="line">        res = res1*x</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子序和</a></h4><p>分治思路：</p><p>一个序列中的最大子序列和可以分为三个部分， 左半部分的子序列和，右半部分的子序列和，从中间开始的最大子序和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 结束条件</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 划分子问题</span></span><br><span class="line">        max_sum_l = self.maxSubArray(nums[:len(nums)//<span class="number">2</span>])</span><br><span class="line">        max_sum_r = self.maxSubArray(nums[len(nums)//<span class="number">2</span>:])</span><br><span class="line">        <span class="comment"># 从中间开始</span></span><br><span class="line">        m_left = nums[len(nums)//<span class="number">2</span> - <span class="number">1</span>]</span><br><span class="line">        m_right = nums[len(nums)//<span class="number">2</span>]</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)//<span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            temp += nums[i]</span><br><span class="line">            m_left = max(m_left, temp)</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)//<span class="number">2</span>, len(nums)):</span><br><span class="line">            temp += nums[i]</span><br><span class="line">            m_right = max(m_right, temp)</span><br><span class="line">        <span class="keyword">return</span> max(max_sum_l, max_sum_r, m_right+m_left)</span><br></pre></td></tr></table></figure><p>这个算法不是很好，计算的复杂度还是O（n）的，因为每一次的决策是否加入后面的序列可以根据上一次的计算结果，采用动态规划也可以， 提前算好每一次前几个序列和和，还可以减少空间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        dp = [<span class="number">0</span>] * len(nums)</span><br><span class="line">        <span class="comment"># 存储每一步的最优结果</span></span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        max_num = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="comment"># 对于每一次更新加入i个数字后的序列的最佳子序列和</span></span><br><span class="line">            dp[i] = max(dp[i<span class="number">-1</span>]+nums[i], nums[i])</span><br><span class="line">            <span class="keyword">if</span> dp[i] &gt; max_num:</span><br><span class="line">                max_num = dp[i]</span><br><span class="line">        <span class="keyword">return</span> max_num</span><br></pre></td></tr></table></figure><h4 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169. 多数元素</a></h4><p>​    对于这种求出现次数的问题，python中collection模块中的Count 很好用,  但是本文没有使用该方法，一个简单的思路是用一个dict来统计出现的次数，然后便利这个字典求出最大次数的即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        table = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> table.keys():</span><br><span class="line">                table[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                table[i] = <span class="number">1</span></span><br><span class="line">        max_freq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> table.keys():</span><br><span class="line">            <span class="keyword">if</span> table[key] &gt; max_freq:</span><br><span class="line">                max_freq = table[key]</span><br><span class="line">                temp = key</span><br><span class="line">        <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><p>但是这个不是我们的目标，我们的目标是学会利用分治的思想</p><p>传统的分治思想对于数组来说，基本上就是从空间上划数组的范围达到分解问题再组合，这个题目其实利用了一个假设，就是如果一个数字出现的次数最多，要么在左边数量最多，要么在右边数量最多</p><p>按照这个假设就可以做题了，首先分为两个部分，然后再来求两边的哪一个最大，如果分到只剩下这一个就返回这个数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> nums <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    left = self.majorityElement(nums[: len(nums) // <span class="number">2</span>])</span><br><span class="line">    right = self.majorityElement(nums[len(nums) // <span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">if</span> right == left:</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># N+N</span></span><br><span class="line">        <span class="keyword">return</span> right <span class="keyword">if</span> nums.count(right) &gt; nums.count(left) <span class="keyword">else</span> left</span><br></pre></td></tr></table></figure><p>使用分治的算法其实相比哈希的方法更慢，因为最后都有个查询次数的遍历，反而计算量更大</p><p>最佳的办法还是使用Conter 方法最快，然后使用most_commen 函数找最常见的，然后返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span> -&gt; int:</span></span><br><span class="line">        c = Counter(nums)</span><br><span class="line">        <span class="keyword">return</span> c.most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>还有利用条件n/2 的，先排序再取中间值，虽然速度很快，但是计算复杂度是nlog(n)的，速度快只是运气好主频高而已</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分治算法：&quot;&gt;&lt;a href=&quot;#分治算法：&quot; class=&quot;headerlink&quot; title=&quot;分治算法：&quot;&gt;&lt;/a&gt;分治算法：&lt;/h1&gt;&lt;p&gt;what: 是一个将母问题分为&lt;strong&gt;相同&lt;/strong&gt;子问题来简化计算的算法&lt;/p&gt;
&lt;p&gt;How: 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>从零开始爬取疫情并云端数据可视化</title>
    <link href="http://yoursite.com/2020/03/03/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%88%AC%E5%8F%96%E7%96%AB%E6%83%85%E5%B9%B6%E4%BA%91%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/03/从零开始爬取疫情并云端数据可视化/</id>
    <published>2020-03-03T13:56:13.311Z</published>
    <updated>2020-03-03T14:27:35.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始爬取疫情并云端数据可视化"><a href="#从零开始爬取疫情并云端数据可视化" class="headerlink" title="从零开始爬取疫情并云端数据可视化"></a>从零开始爬取疫情并云端数据可视化</h1><p>实验OS环境：Win10 /ubuntu 16.04</p><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>首先需要安装Python， windows版本在Python网站下载 msi安装版 （py3.71）</p><ul><li><p><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Win64版本下载网址</a><br><img src="https://img-blog.csdnimg.cn/20181104160256950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3loY2Fk,size_16,color_FFFFFF,t_70" alt="avatar"><br>自动添加环境变量勾选下方“Add Python 3.7 to PATH”<br><img src="https://img-blog.csdnimg.cn/20181104160428746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3loY2Fk,size_16,color_FFFFFF,t_70" alt="avatar"><br> 手动设置环境变量：在系统环境变量中添加安装路径 (省略号表示安装路径的前缀)<br> ….\Python37\Scripts\;….\Python37\</p></li><li><p><a href="https://www.cnblogs.com/felixwang2/p/9934460.html" target="_blank" rel="noopener">Linux版本教程</a></p></li></ul><h3 id="step1：测试安装"><a href="#step1：测试安装" class="headerlink" title="step1：测试安装"></a>step1：测试安装</h3><p>输入python 回车出现下述shell场景表示安装成功， 输入exit()退出</p><p>  <img src="https://img-blog.csdn.net/20180805234327122?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODQ0MDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="asd"></p><h2 id="安装Streamlit"><a href="#安装Streamlit" class="headerlink" title="安装Streamlit"></a>安装Streamlit</h2><p>streamlit 是第一个专门针对机器学习和数据科学团队的应用开发框架,它是开发自定义机器学习工具的最快的方法，可以调用tornado与其他可视化包的网站框架。<a href="https://www.streamlit.io/" target="_blank" rel="noopener">官网地址</a></p><p>本文使用streamlit的地图可视化官方教程<a href="https://github.com/streamlit/demo-uber-nyc-pickups" target="_blank" rel="noopener">Github</a></p><h3 id="step2-测试安装成果"><a href="#step2-测试安装成果" class="headerlink" title="step2: 测试安装成果"></a>step2: 测试安装成果</h3><ul><li><p>cmd 输入 pip install streamlit， 安装完成后输入streamlit hello 测试是否安装成功，浏览器中进入 <a href="http://localhost:8501" target="_blank" rel="noopener">http://localhost:8501</a> 出现下述场景表示安装完成， cmd中按住ctrl+c可以退出</p><p><img src="https://s2.ax1x.com/2020/03/03/34o3PU.png" alt="34o3PU.png"></p></li><li><p>cmd 输入 pip install json, 完成安装json解析库</p><p><img src="http://blog.hubwiz.com/2019/10/03/streamlit-ml/local-app.png" alt="avatar" style="zoom: 33%;"></p></li></ul><h2 id="在丁香园网上爬取数据"><a href="#在丁香园网上爬取数据" class="headerlink" title="在丁香园网上爬取数据"></a>在丁香园网上爬取数据</h2><h3 id="step3：创建web-get-py文件"><a href="#step3：创建web-get-py文件" class="headerlink" title="step3：创建web_get.py文件"></a>step3：创建web_get.py文件</h3><p>​    需要导入的依赖库有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> pydeck <span class="keyword">as</span> pdk</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="step4：使用爬虫爬取丁香园数据"><a href="#step4：使用爬虫爬取丁香园数据" class="headerlink" title="step4：使用爬虫爬取丁香园数据"></a>step4：使用爬虫爬取丁香园数据</h3><ul><li>首先在浏览器进入丁香园<a href="https://3g.dxy.cn/newh5/view/pneumonia?scene=2&amp;clicktime=1579596108&amp;enterid=1579596108&amp;from=groupmessage&quot;&quot;&amp;isappinstalled=0" target="_blank" rel="noopener">网址</a> 按下F12查看网页信息，找到数据项藏在<code>&lt;strip id = &quot;window.getAreaStat&quot;&gt;&lt;/strip&gt;</code>中</li></ul><p><img src="https://s2.ax1x.com/2020/03/03/34otM9.png" alt="34otM9.png"></p><ul><li><p>写一个正则表达式，将中间的数据提取出来<br><code>want = re.compile(r&#39; window.getAreaStat.*?&lt;/script&gt;&#39;, re.S)</code></p></li><li><p>对html进行匹配得到数据，并转化为string格式</p><p><code>result = want.findall(str(html.decode(&quot;utf-8&quot;)))</code></p></li><li><p>此时的结果是字符串格式的</p></li><li><p>需要对数据处理，将不必要的符号和其他的无意义单词去除</p></li><li><p>将字符串转化为json格式：</p><p><code>json.loads(result)</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_from_web</span><span class="params">()</span>:</span></span><br><span class="line">    user_agent = <span class="string">"ritarma/1.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0"</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: user_agent&#125;</span><br><span class="line">    req = request.Request(</span><br><span class="line">        <span class="string">"https://3g.dxy.cn/newh5/view/pneumonia?scene=2&amp;clicktime=1579596108&amp;enterid=1579596108&amp;from=groupmessage"</span></span><br><span class="line">        <span class="string">"&amp;isappinstalled=0"</span>,</span><br><span class="line">        headers=headers)</span><br><span class="line">    resp = request.urlopen(req)</span><br><span class="line">    <span class="comment"># 打开页面</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = resp.read()</span><br><span class="line">    <span class="keyword">except</span> http.client.IncompleteRead <span class="keyword">as</span> e:</span><br><span class="line">        html = e.partial</span><br><span class="line"></span><br><span class="line">    want = re.compile(<span class="string">r' window.getAreaStat.*?&lt;/script&gt;'</span>, re.S)</span><br><span class="line">    result = want.findall(str(html.decode(<span class="string">"utf-8"</span>)))</span><br><span class="line">    result = str(result).replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 处理结果</span></span><br><span class="line">    result_p = result</span><br><span class="line">    <span class="comment"># print('处理结果:',result)</span></span><br><span class="line">    result_p = result_p.replace(<span class="string">']&#125;catch(e)&#123;&#125;&lt;/script&gt;'</span>, <span class="string">" "</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">'&#125;'</span>, <span class="string">"&#125;\n"</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">'window.getAreaStat=['</span>, <span class="string">" "</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">"[' "</span>, <span class="string">""</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">" ']"</span>, <span class="string">""</span>)</span><br><span class="line">    json_output = json.loads(<span class="string">'['</span> + result_p + <span class="string">']'</span>)</span><br><span class="line">    <span class="keyword">return</span> json_output</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="地图可视化"><a href="#地图可视化" class="headerlink" title="地图可视化"></a>地图可视化</h2><h3 id="step5：转化数据格式，"><a href="#step5：转化数据格式，" class="headerlink" title="step5：转化数据格式，"></a>step5：转化数据格式，</h3><p>​    分析json格式的输出，里面的格式是字典类型的映射，获得省份的数据使用<code>data[&#39;provinceName&#39;]</code>获得各个城市的确诊人数<code>data[&#39;provinceName&#39;][&#39;cities&#39;][&#39;confirmedCount&#39;]</code>， 此时只有当前省份和城市的数据，要在地图上是可视化需要得到各个城市的地理坐标（经纬度信息）</p><p>​    在pyecharts中查询地理坐标需要导入中国城市的地图包，本文使用一个带有全国地理信息的json文件作为原始信息，并对该文件解析，得到各个城市的地理位置信息。该json文件来源于网络，需要对一些不规则的结构略作处理，并对地名找不到的异常处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lat_by_name</span><span class="params">(name: str, pos_dic)</span>:</span></span><br><span class="line">    pos_data = str(pos_dic[name]).split(<span class="string">','</span>)</span><br><span class="line">    lat = float(pos_data[<span class="number">0</span>])</span><br><span class="line">    lon = float(pos_data[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> lat, lon</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pos_by_json</span><span class="params">(url=<span class="string">'geo_info/geoinfo-all.json'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get all cities position form json file</span></span><br><span class="line"><span class="string">    :return: dictionary of [cityName, (lat, lon)]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        all_city_pos = json.loads(f.read())</span><br><span class="line">    pos_dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> all_city_pos:</span><br><span class="line">        <span class="comment"># pos_dic.update(&#123;province['name'].replace('市', ''): province['center']&#125;)</span></span><br><span class="line">        pos_dic.update(&#123;province[<span class="string">'name'</span>]: province[<span class="string">'center'</span>]&#125;)</span><br><span class="line">        <span class="keyword">if</span> province[<span class="string">'name'</span>] != <span class="string">'重庆市'</span>:</span><br><span class="line">            <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'districts'</span>]:</span><br><span class="line">                pos_dic.update(&#123;city[<span class="string">'name'</span>].replace(<span class="string">'市'</span>, <span class="string">''</span>): city[<span class="string">'center'</span>]&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'districts'</span>]:</span><br><span class="line">                <span class="keyword">for</span> districts <span class="keyword">in</span> city[<span class="string">'districts'</span>]:</span><br><span class="line">                    pos_dic.update(&#123;districts[<span class="string">'name'</span>]: districts[<span class="string">'center'</span>]&#125;)</span><br><span class="line">    <span class="keyword">return</span> pos_dic</span><br></pre></td></tr></table></figure><p>转化为需要的格式[cityName, counts, latitude, longitude]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cities_data</span><span class="params">(json_output, pos_dic)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get all cities data form json and position dictionary</span></span><br><span class="line"><span class="string">    :return: list of [lat, lon, cityName, counts]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    city_list = []</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> json_output:</span><br><span class="line">        <span class="keyword">if</span> province[<span class="string">'provinceName'</span>] == <span class="string">'台湾'</span>:</span><br><span class="line">            lat, lon = get_lat_by_name(province[<span class="string">'provinceName'</span>], pos_dic)</span><br><span class="line">            city_list.append([lat, lon, province[<span class="string">'provinceName'</span>], province[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'cities'</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                lat, lon = get_lat_by_name(city[<span class="string">'cityName'</span>], pos_dic)</span><br><span class="line">                city_list.append([lat, lon, city[<span class="string">'cityName'</span>], city[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    lat, lon = get_lat_by_name(city[<span class="string">'cityName'</span> + <span class="string">'区'</span>], pos_dic)</span><br><span class="line">                    city_list.append([lat, lon, city[<span class="string">'cityName'</span>], city[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> city_list</span><br></pre></td></tr></table></figure><p>​    最后将数据转化Pandas包的DataFrame 格式</p><p><code>data = get_cities_data(get_data_from_web(), get_pos_by_json())</code></p><p><code>data = pd.DataFrame(data, columns=[&#39;lat&#39;, &#39;lon&#39;, &#39;cityName&#39;, &#39;counts&#39;])</code></p><h3 id="step6-可视化"><a href="#step6-可视化" class="headerlink" title="step6: 可视化"></a>step6: 可视化</h3><p>  streamlit 使用的数据可视化包是Uber团队开发的开源地图<a href="https://github.com/uber/deck.gl" target="_blank" rel="noopener">deck.gl</a> 在安装streamlit的同时已经附带安装了deckgl的python封装库pydeck。</p><p>​    此时直接将数据输入pydeck的接口中不能完全显示，需要先定义一个摄像机观察位置</p><p>​        <code>view_point= [32.33, 113.32]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># initial view state ：</span></span><br><span class="line">view_state = pdk.ViewState(latitude=view_point[<span class="number">0</span>], longitude=view_point[<span class="number">1</span>], zoom=<span class="number">4</span>, pitch=<span class="number">40</span>, bearing=<span class="number">-27.36</span>)</span><br><span class="line"></span><br><span class="line">column_layer = pdk.Layer(</span><br><span class="line">    <span class="string">"ColumnLayer"</span>,</span><br><span class="line">    data=city_data,</span><br><span class="line">    get_position=[<span class="string">"lat"</span>, <span class="string">"lon"</span>],</span><br><span class="line">    radius=<span class="number">15000</span>,</span><br><span class="line">    diskResolution=<span class="number">24</span>,</span><br><span class="line">    elevation_scale=<span class="number">90</span>,</span><br><span class="line">    elevation_range=[<span class="number">0</span>, <span class="number">10000</span>],</span><br><span class="line">    getElevation=<span class="string">'counts'</span>,</span><br><span class="line">    getFillColor=<span class="string">'[48, 128, counts*3, 225]'</span>,</span><br><span class="line">    getLineColor=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    pickable=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">st.write(pdk.Deck(</span><br><span class="line">    map_style=<span class="string">"mapbox://styles/mapbox/dark-v10"</span>,</span><br><span class="line">    initial_view_state=view_state,</span><br><span class="line">    layers=[column_layer],</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>在当前的python文件路径下使用cmd输入</p><p><code>streamlit run  you_file_name.py</code></p><h3 id="step7-浏览器打开网址loacalhost：8501"><a href="#step7-浏览器打开网址loacalhost：8501" class="headerlink" title="step7: 浏览器打开网址loacalhost：8501"></a>step7: 浏览器打开<a href="loacalhost：8501">网址loacalhost：8501</a></h3><p><img src="https://s2.ax1x.com/2020/03/03/34oUq1.png" alt="avatar"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd下输入 ctrl+c 可以退出</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从零开始爬取疫情并云端数据可视化&quot;&gt;&lt;a href=&quot;#从零开始爬取疫情并云端数据可视化&quot; class=&quot;headerlink&quot; title=&quot;从零开始爬取疫情并云端数据可视化&quot;&gt;&lt;/a&gt;从零开始爬取疫情并云端数据可视化&lt;/h1&gt;&lt;p&gt;实验OS环境：Win10 /
      
    
    </summary>
    
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/08/16/%E4%BA%A4%E5%8F%89%E7%86%B5%E4%B8%8E%E5%9F%BA%E4%BA%8E%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/16/交叉熵与基于交叉熵的损失函数/</id>
    <published>2019-08-16T06:34:10.612Z</published>
    <updated>2019-08-16T06:34:10.717Z</updated>
    
    <content type="html"><![CDATA[<p>交叉熵与基于交叉熵的损失函数</p><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><p>概念：首先解释解信息熵：<strong>信息熵是用来消除不确定性所需信息的度量</strong>，W（）CA</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交叉熵与基于交叉熵的损失函数&lt;/p&gt;
&lt;h4 id=&quot;交叉熵&quot;&gt;&lt;a href=&quot;#交叉熵&quot; class=&quot;headerlink&quot; title=&quot;交叉熵&quot;&gt;&lt;/a&gt;交叉熵&lt;/h4&gt;&lt;p&gt;概念：首先解释解信息熵：&lt;strong&gt;信息熵是用来消除不确定性所需信息的度量&lt;/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java的HashMap</title>
    <link href="http://yoursite.com/2019/05/14/HashMap/"/>
    <id>http://yoursite.com/2019/05/14/HashMap/</id>
    <published>2019-05-14T06:34:13.427Z</published>
    <updated>2019-05-14T06:47:14.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>主要参数： capacity，loadFactor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">  ↳     java.util.AbstractMap&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.HashMap&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p> 继承了抽象类AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。</p><p><img src="https://images0.cnblogs.com/blog/497634/201401/280024326252470.jpg" alt="img"></p><p>threshold的值=”容量*加载因子”</p><p>当HashMap中的容量到threshold，重建Hash表，将容量加倍</p><p>table主要存储容器，每个单元Entry都是带hash（int）和next的<key, value>对</key,></p><p><strong>为什么使用hash：</strong> 为了效率</p><p><strong>使用hash会有什么不好的后果</strong> 空间换时间，产生哈希冲突</p><p>HashMap中如何解决这问题：<strong>散列表</strong>—&gt;Entry的next</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h3&gt;&lt;p&gt;主要参数： capacity，loadFactor&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/05/12/Text%20Classification%20Read%20notes/"/>
    <id>http://yoursite.com/2019/05/12/Text Classification Read notes/</id>
    <published>2019-05-12T08:44:38.195Z</published>
    <updated>2019-05-12T08:44:51.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-Classification-Read-notes"><a href="#Text-Classification-Read-notes" class="headerlink" title="Text Classification Read notes"></a>Text Classification Read notes</h2><p>解决文本分类的问题<br><strong>流程：</strong></p><p>​    特征提取 -&gt;&gt; (特征降维) &gt;&gt; 分类→评估</p><p><img src="C:\Users\ThinkPad\AppData\Roaming\Typora\typora-user-images\1557644929766.png" alt="1557644929766"></p><p>基于机器学习和深度学习都有一个难以避免的特点，就是模型本身的鲁棒性相对不够，但是处理的问题都十分复杂，对文本的预处理十分重要：</p><h3 id="特征提取与清洗"><a href="#特征提取与清洗" class="headerlink" title="特征提取与清洗"></a>特征提取与清洗</h3><p><strong>文本数据的清洗</strong>：</p><pre><code> 1. 分词：Tokenization 2. 去除意义不大的词语{啊，一，后，前} 3. 大小写问题解决 4. 口语化和简称 5. 降噪{不必要的标点} 6. 语法错误 7. 词语的时态 8. 还原词形</code></pre><p><strong>词语的语法分析</strong></p><pre><code>1. N-Gram</code></pre><p><strong>加权词语</strong></p><pre><code>1. 词袋模型（不计算顺序与上下文，将所有的 词扔进一个袋子中，附送的都是出现次数，基于单热编码） 2. 词向量模型（神经忘录得到高位向量，具有上下文信息，但是并不能包含长连续全部的语义）</code></pre><p>此处注意的事：并不是词向量（word2Vec）就是最好的，在贝叶斯邮件分类，文本分类中，词袋模型的下效率高，仅仅有文章的内容信息，鲁棒性更好</p><h3 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h3><ol><li>PCA 主成分分析法应用非常广</li><li>ICA 独立成分分析，在线性的模型中应用多</li><li>LDA ，NMF</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Text-Classification-Read-notes&quot;&gt;&lt;a href=&quot;#Text-Classification-Read-notes&quot; class=&quot;headerlink&quot; title=&quot;Text Classification Read notes&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>隐马尔克夫模型的一些概念</title>
    <link href="http://yoursite.com/2019/04/30/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%85%8B%E5%A4%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/04/30/隐马尔克夫模型的一些概念/</id>
    <published>2019-04-30T05:49:35.732Z</published>
    <updated>2020-03-03T14:02:18.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马尔克夫模型的一些概念"><a href="#马尔克夫模型的一些概念" class="headerlink" title="马尔克夫模型的一些概念"></a>马尔克夫模型的一些概念</h3><p><strong>状态链</strong>：今天的天气：{Sun, Cloud,Rain}<br><strong>观察链</strong>：今天的干湿度：{Soggy， Damp， Dryish， Dry}</p><p><img src="http://www.leexiang.com/wp-content/uploads/ckfinder/images/hidden-weather-example.gif" alt="1556604603432"><br><strong>Assumptions</strong>: 今天的干湿度状态决定(天气状态)， 明天的天气只与今天的天气有关<br><strong>Define</strong>：<br>    状态初始概率：</p><script type="math/tex; mode=display">\pi_i=P{(y_i = S_i)}  1<i<N</script><p>状态转移概率：</p><script type="math/tex; mode=display">a_{ij} = P(y_{t+1}=S_j|y_t=S_i),      1\leq i,j\leq N</script><p>输出观测概率</p><script type="math/tex; mode=display">b_{ij} = P(x_t=O_j | y_t =S_i),  1 \leq i\leq N,  1\leq j\leq M</script><p>要求的输出：</p><script type="math/tex; mode=display">P(y_i = S_i, x_j = O_j) =\pi_i *b_{ij}</script><script type="math/tex; mode=display">P(y_{i+1} = S_p,x_{j+1}=O_q) = a_{ip}*\pi_i*b_{i+1，j+1}</script><p>解决三种问题：</p><ol><li>有一个词典的统计数据可以得到模型<code>{A,B,Π}</code> ，可以得到观察序列，想知道隐藏序列，<code>语音识别，词性标注</code></li><li>得到模型，知道状态序列，想预测概率最大的观察序列</li><li>如何训练得到一个比较好的模型</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;a href=&quot;#马尔克夫模型的一些概念&quot; class=&quot;headerlink&quot; title=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;/a&gt;马尔克夫模型的一些概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;状态链&lt;/strong&gt;：今天的天气：{Sun, C
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java开发的几条重要原则</title>
    <link href="http://yoursite.com/2019/04/29/JAVA%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E6%9D%A1%E9%87%8D%E8%A6%81%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/29/JAVA开发的几条重要原则/</id>
    <published>2019-04-29T05:36:43.625Z</published>
    <updated>2019-04-30T07:12:47.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA开发的几条重要原则"><a href="#JAVA开发的几条重要原则" class="headerlink" title="JAVA开发的几条重要原则"></a>JAVA开发的几条重要原则</h1><ol><li><p>在大型项目中使用log的门面模式，而不能直接调用log4的api</p></li><li><p>boolean 变量不要增加isOK这样的，直接写OK，否则序列化会产生灵异问题</p></li><li>Boolean是boolean的封装， 在pojo和trs框架中使用Boolean可以发现异常，及时停止程序，在返回值的时候考虑到Boolean带来的null，直接用boolean会减少很多null处理工作</li><li>在for循环中少量使用“+”来拼接字符串，使用join或其他的</li><li>使用foreach循环可以简洁，但是注意本质基于迭代器的while循环，不要在foreach中使用add，和remove对象</li><li>hashmap中如果设置一个初始化容量，可以提高效率</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;a href=&quot;#JAVA开发的几条重要原则&quot; class=&quot;headerlink&quot; title=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;/a&gt;JAVA开发的几条重要原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在大型项目中使用log的门面模式，
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的装箱与拆箱</title>
    <link href="http://yoursite.com/2019/04/28/Java%E7%9A%84%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/"/>
    <id>http://yoursite.com/2019/04/28/Java的装箱与拆箱/</id>
    <published>2019-04-28T03:33:12.197Z</published>
    <updated>2019-04-28T03:44:17.214Z</updated>
    
    <content type="html"><![CDATA[<p>主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力</p><h1 id="Java的装箱与拆箱"><a href="#Java的装箱与拆箱" class="headerlink" title="Java的装箱与拆箱"></a>Java的装箱与拆箱</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中的基本数据类型共有八种，分为数值型，字符型， 布尔型</p><ol><li><p>字符类型： char</p></li><li><p>布尔类型： boolean</p></li><li><p>数据类型： int， float， double， byte， short， long</p></li></ol><p>与C#有所不同<br>      Java是一种全面向对象的语言，和C#一样都是对象全在堆里面，然后C#就是数值类型和引用类型，Java就搞出来了基本类型和对象类型<br>      Java和C++的基本数值类型也不一样，Java的数值都没有无符号这一说，这也是要全平台运行的设计需求决定的，程序设计者也不想考虑在某个平台上的运行错误。因为数值类型不存储在栈里就会变慢，但是这样就会导致溢出，所以为了想两全其美 ，只有把基本数据类型封装成一种类，这样就给程序设计人员一种方式来处理更复杂情况下的数据。</p><p>如果计算发生了溢出如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = Integer.MAX_VALUE;</span><br><span class="line">   <span class="keyword">int</span> j = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> k = i + j;</span><br><span class="line">   System.out.println(<span class="string">"i ("</span> + i + <span class="string">") + j ("</span> + j + <span class="string">") = k ("</span> + k + <span class="string">")"</span>);</span><br></pre></td></tr></table></figure><p>输出结果： i (2147483647) + j (2147483647) = k (-2)</p><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>为了解决基本数据类型会产生溢出的现象，将基本类型封装成为一个类</p><div class="table-container"><table><thead><tr><th>基本数据类型</th><th>包装后的类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr></tbody></table></div><p>注意：变量名小写，类名大写</p><p>毫无疑问，全面向对象的语言有一个特点，就是什么都是对象，显然这是一种理想的状态，丰富的数据类型，才可以面对丰富的情况，类：丰富的属性和方法，全都继承于object，更多的扩展性带来了效率的低下，相比基本类型更快，好用，但是扩展性低。</p><p>将存在栈内的的数据变成存在堆中的对象，Java SE5 以上的版本增加了自动装箱技术；在C#中也可以进行相似的转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i =<span class="number">10</span>;  <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> b= i;     <span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><p>c#中的装箱如下，需要注意的是，本质上只是创建了一个object的副本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 10;</span><br><span class="line">object oi = i;</span><br><span class="line">int j = (int) oi;</span><br></pre></td></tr></table></figure><h3 id="自动装箱下的实际操作"><a href="#自动装箱下的实际操作" class="headerlink" title="自动装箱下的实际操作"></a>自动装箱下的实际操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">50</span>; i ++)&#123;</span><br><span class="line">    li.add(i); <span class="comment">//实际的操作： li.add(Integer.valueOf(i));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在大型计算中，注意不要进行integer的复杂计算，否则会带来自动拆箱的效率问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line">  Integer j = Integer.valueOf(<span class="number">20</span>);</span><br><span class="line">  System.out.println(i.intValue() + j.intValue());</span><br></pre></td></tr></table></figure><p>以及<code>flage？(integer)i：(int)j;</code> 如果i是null会导致空指针异常<code>nullPointerError</code>  </p><h3 id="自动装箱带来的问题"><a href="#自动装箱带来的问题" class="headerlink" title="自动装箱带来的问题"></a>自动装箱带来的问题</h3><p>当然，自动拆装箱是一个很好的功能，大大节省了开发人员的精力，不再需要关心到底什么时候需要拆装箱。但是，他也会引入一些问题。</p><blockquote><p>包装对象的数值比较，不能简单的使用<code>==</code>，虽然-128到127之间的数字可以，但是这个范围之外还是需要使用<code>equals</code>比较。</p><p>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为null，那么自动拆箱时就有可能抛出NPE。</p><p>如果一个for循环中有大量拆装箱操作，会浪费很多资源。</p></blockquote><p>参考资料 <a href="https://www.hollischuang.com/archives/2700" target="_blank" rel="noopener">一文读懂什么是Java中的自动拆装箱</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力&lt;/p&gt;
&lt;h1 id=&quot;Java的装箱与拆箱&quot;&gt;&lt;a href=&quot;#Java的装箱与拆箱&quot; class=&quot;headerlink&quot; title=&quot;Java的装箱与拆箱&quot;&gt;&lt;/a&gt;Java的装箱与拆箱&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
