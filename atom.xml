<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ritarma</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-03T14:27:35.266Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ritarma Arthur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从零开始爬取疫情并云端数据可视化</title>
    <link href="http://yoursite.com/2020/03/03/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%88%AC%E5%8F%96%E7%96%AB%E6%83%85%E5%B9%B6%E4%BA%91%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/03/从零开始爬取疫情并云端数据可视化/</id>
    <published>2020-03-03T13:56:13.311Z</published>
    <updated>2020-03-03T14:27:35.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零开始爬取疫情并云端数据可视化"><a href="#从零开始爬取疫情并云端数据可视化" class="headerlink" title="从零开始爬取疫情并云端数据可视化"></a>从零开始爬取疫情并云端数据可视化</h1><p>实验OS环境：Win10 /ubuntu 16.04</p><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>首先需要安装Python， windows版本在Python网站下载 msi安装版 （py3.71）</p><ul><li><p><a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">Win64版本下载网址</a><br><img src="https://img-blog.csdnimg.cn/20181104160256950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3loY2Fk,size_16,color_FFFFFF,t_70" alt="avatar"><br>自动添加环境变量勾选下方“Add Python 3.7 to PATH”<br><img src="https://img-blog.csdnimg.cn/20181104160428746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3loY2Fk,size_16,color_FFFFFF,t_70" alt="avatar"><br> 手动设置环境变量：在系统环境变量中添加安装路径 (省略号表示安装路径的前缀)<br> ….\Python37\Scripts\;….\Python37\</p></li><li><p><a href="https://www.cnblogs.com/felixwang2/p/9934460.html" target="_blank" rel="noopener">Linux版本教程</a></p></li></ul><h3 id="step1：测试安装"><a href="#step1：测试安装" class="headerlink" title="step1：测试安装"></a>step1：测试安装</h3><p>输入python 回车出现下述shell场景表示安装成功， 输入exit()退出</p><p>  <img src="https://img-blog.csdn.net/20180805234327122?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1ODQ0MDQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="asd"></p><h2 id="安装Streamlit"><a href="#安装Streamlit" class="headerlink" title="安装Streamlit"></a>安装Streamlit</h2><p>streamlit 是第一个专门针对机器学习和数据科学团队的应用开发框架,它是开发自定义机器学习工具的最快的方法，可以调用tornado与其他可视化包的网站框架。<a href="https://www.streamlit.io/" target="_blank" rel="noopener">官网地址</a></p><p>本文使用streamlit的地图可视化官方教程<a href="https://github.com/streamlit/demo-uber-nyc-pickups" target="_blank" rel="noopener">Github</a></p><h3 id="step2-测试安装成果"><a href="#step2-测试安装成果" class="headerlink" title="step2: 测试安装成果"></a>step2: 测试安装成果</h3><ul><li><p>cmd 输入 pip install streamlit， 安装完成后输入streamlit hello 测试是否安装成功，浏览器中进入 <a href="http://localhost:8501" target="_blank" rel="noopener">http://localhost:8501</a> 出现下述场景表示安装完成， cmd中按住ctrl+c可以退出</p><p><img src="https://s2.ax1x.com/2020/03/03/34o3PU.png" alt="34o3PU.png"></p></li><li><p>cmd 输入 pip install json, 完成安装json解析库</p><p><img src="http://blog.hubwiz.com/2019/10/03/streamlit-ml/local-app.png" alt="avatar" style="zoom: 33%;"></p></li></ul><h2 id="在丁香园网上爬取数据"><a href="#在丁香园网上爬取数据" class="headerlink" title="在丁香园网上爬取数据"></a>在丁香园网上爬取数据</h2><h3 id="step3：创建web-get-py文件"><a href="#step3：创建web-get-py文件" class="headerlink" title="step3：创建web_get.py文件"></a>step3：创建web_get.py文件</h3><p>​    需要导入的依赖库有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> pydeck <span class="keyword">as</span> pdk</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="step4：使用爬虫爬取丁香园数据"><a href="#step4：使用爬虫爬取丁香园数据" class="headerlink" title="step4：使用爬虫爬取丁香园数据"></a>step4：使用爬虫爬取丁香园数据</h3><ul><li>首先在浏览器进入丁香园<a href="https://3g.dxy.cn/newh5/view/pneumonia?scene=2&amp;clicktime=1579596108&amp;enterid=1579596108&amp;from=groupmessage&quot;&quot;&amp;isappinstalled=0" target="_blank" rel="noopener">网址</a> 按下F12查看网页信息，找到数据项藏在<code>&lt;strip id = &quot;window.getAreaStat&quot;&gt;&lt;/strip&gt;</code>中</li></ul><p><img src="https://s2.ax1x.com/2020/03/03/34otM9.png" alt="34otM9.png"></p><ul><li><p>写一个正则表达式，将中间的数据提取出来<br><code>want = re.compile(r&#39; window.getAreaStat.*?&lt;/script&gt;&#39;, re.S)</code></p></li><li><p>对html进行匹配得到数据，并转化为string格式</p><p><code>result = want.findall(str(html.decode(&quot;utf-8&quot;)))</code></p></li><li><p>此时的结果是字符串格式的</p></li><li><p>需要对数据处理，将不必要的符号和其他的无意义单词去除</p></li><li><p>将字符串转化为json格式：</p><p><code>json.loads(result)</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_from_web</span><span class="params">()</span>:</span></span><br><span class="line">    user_agent = <span class="string">"ritarma/1.0 (X11; Ubuntu; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0"</span></span><br><span class="line">    headers = &#123;<span class="string">"User-Agent"</span>: user_agent&#125;</span><br><span class="line">    req = request.Request(</span><br><span class="line">        <span class="string">"https://3g.dxy.cn/newh5/view/pneumonia?scene=2&amp;clicktime=1579596108&amp;enterid=1579596108&amp;from=groupmessage"</span></span><br><span class="line">        <span class="string">"&amp;isappinstalled=0"</span>,</span><br><span class="line">        headers=headers)</span><br><span class="line">    resp = request.urlopen(req)</span><br><span class="line">    <span class="comment"># 打开页面</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = resp.read()</span><br><span class="line">    <span class="keyword">except</span> http.client.IncompleteRead <span class="keyword">as</span> e:</span><br><span class="line">        html = e.partial</span><br><span class="line"></span><br><span class="line">    want = re.compile(<span class="string">r' window.getAreaStat.*?&lt;/script&gt;'</span>, re.S)</span><br><span class="line">    result = want.findall(str(html.decode(<span class="string">"utf-8"</span>)))</span><br><span class="line">    result = str(result).replace(<span class="string">" "</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 处理结果</span></span><br><span class="line">    result_p = result</span><br><span class="line">    <span class="comment"># print('处理结果:',result)</span></span><br><span class="line">    result_p = result_p.replace(<span class="string">']&#125;catch(e)&#123;&#125;&lt;/script&gt;'</span>, <span class="string">" "</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">'&#125;'</span>, <span class="string">"&#125;\n"</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">'window.getAreaStat=['</span>, <span class="string">" "</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">"[' "</span>, <span class="string">""</span>)</span><br><span class="line">    result_p = result_p.replace(<span class="string">" ']"</span>, <span class="string">""</span>)</span><br><span class="line">    json_output = json.loads(<span class="string">'['</span> + result_p + <span class="string">']'</span>)</span><br><span class="line">    <span class="keyword">return</span> json_output</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="地图可视化"><a href="#地图可视化" class="headerlink" title="地图可视化"></a>地图可视化</h2><h3 id="step5：转化数据格式，"><a href="#step5：转化数据格式，" class="headerlink" title="step5：转化数据格式，"></a>step5：转化数据格式，</h3><p>​    分析json格式的输出，里面的格式是字典类型的映射，获得省份的数据使用<code>data[&#39;provinceName&#39;]</code>获得各个城市的确诊人数<code>data[&#39;provinceName&#39;][&#39;cities&#39;][&#39;confirmedCount&#39;]</code>， 此时只有当前省份和城市的数据，要在地图上是可视化需要得到各个城市的地理坐标（经纬度信息）</p><p>​    在pyecharts中查询地理坐标需要导入中国城市的地图包，本文使用一个带有全国地理信息的json文件作为原始信息，并对该文件解析，得到各个城市的地理位置信息。该json文件来源于网络，需要对一些不规则的结构略作处理，并对地名找不到的异常处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_lat_by_name</span><span class="params">(name: str, pos_dic)</span>:</span></span><br><span class="line">    pos_data = str(pos_dic[name]).split(<span class="string">','</span>)</span><br><span class="line">    lat = float(pos_data[<span class="number">0</span>])</span><br><span class="line">    lon = float(pos_data[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> lat, lon</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pos_by_json</span><span class="params">(url=<span class="string">'geo_info/geoinfo-all.json'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get all cities position form json file</span></span><br><span class="line"><span class="string">    :return: dictionary of [cityName, (lat, lon)]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        all_city_pos = json.loads(f.read())</span><br><span class="line">    pos_dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> all_city_pos:</span><br><span class="line">        <span class="comment"># pos_dic.update(&#123;province['name'].replace('市', ''): province['center']&#125;)</span></span><br><span class="line">        pos_dic.update(&#123;province[<span class="string">'name'</span>]: province[<span class="string">'center'</span>]&#125;)</span><br><span class="line">        <span class="keyword">if</span> province[<span class="string">'name'</span>] != <span class="string">'重庆市'</span>:</span><br><span class="line">            <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'districts'</span>]:</span><br><span class="line">                pos_dic.update(&#123;city[<span class="string">'name'</span>].replace(<span class="string">'市'</span>, <span class="string">''</span>): city[<span class="string">'center'</span>]&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'districts'</span>]:</span><br><span class="line">                <span class="keyword">for</span> districts <span class="keyword">in</span> city[<span class="string">'districts'</span>]:</span><br><span class="line">                    pos_dic.update(&#123;districts[<span class="string">'name'</span>]: districts[<span class="string">'center'</span>]&#125;)</span><br><span class="line">    <span class="keyword">return</span> pos_dic</span><br></pre></td></tr></table></figure><p>转化为需要的格式[cityName, counts, latitude, longitude]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cities_data</span><span class="params">(json_output, pos_dic)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    get all cities data form json and position dictionary</span></span><br><span class="line"><span class="string">    :return: list of [lat, lon, cityName, counts]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    city_list = []</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> json_output:</span><br><span class="line">        <span class="keyword">if</span> province[<span class="string">'provinceName'</span>] == <span class="string">'台湾'</span>:</span><br><span class="line">            lat, lon = get_lat_by_name(province[<span class="string">'provinceName'</span>], pos_dic)</span><br><span class="line">            city_list.append([lat, lon, province[<span class="string">'provinceName'</span>], province[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'cities'</span>]:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                lat, lon = get_lat_by_name(city[<span class="string">'cityName'</span>], pos_dic)</span><br><span class="line">                city_list.append([lat, lon, city[<span class="string">'cityName'</span>], city[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    lat, lon = get_lat_by_name(city[<span class="string">'cityName'</span> + <span class="string">'区'</span>], pos_dic)</span><br><span class="line">                    city_list.append([lat, lon, city[<span class="string">'cityName'</span>], city[<span class="string">'confirmedCount'</span>]])</span><br><span class="line">                <span class="keyword">except</span> KeyError:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> city_list</span><br></pre></td></tr></table></figure><p>​    最后将数据转化Pandas包的DataFrame 格式</p><p><code>data = get_cities_data(get_data_from_web(), get_pos_by_json())</code></p><p><code>data = pd.DataFrame(data, columns=[&#39;lat&#39;, &#39;lon&#39;, &#39;cityName&#39;, &#39;counts&#39;])</code></p><h3 id="step6-可视化"><a href="#step6-可视化" class="headerlink" title="step6: 可视化"></a>step6: 可视化</h3><p>  streamlit 使用的数据可视化包是Uber团队开发的开源地图<a href="https://github.com/uber/deck.gl" target="_blank" rel="noopener">deck.gl</a> 在安装streamlit的同时已经附带安装了deckgl的python封装库pydeck。</p><p>​    此时直接将数据输入pydeck的接口中不能完全显示，需要先定义一个摄像机观察位置</p><p>​        <code>view_point= [32.33, 113.32]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># initial view state ：</span></span><br><span class="line">view_state = pdk.ViewState(latitude=view_point[<span class="number">0</span>], longitude=view_point[<span class="number">1</span>], zoom=<span class="number">4</span>, pitch=<span class="number">40</span>, bearing=<span class="number">-27.36</span>)</span><br><span class="line"></span><br><span class="line">column_layer = pdk.Layer(</span><br><span class="line">    <span class="string">"ColumnLayer"</span>,</span><br><span class="line">    data=city_data,</span><br><span class="line">    get_position=[<span class="string">"lat"</span>, <span class="string">"lon"</span>],</span><br><span class="line">    radius=<span class="number">15000</span>,</span><br><span class="line">    diskResolution=<span class="number">24</span>,</span><br><span class="line">    elevation_scale=<span class="number">90</span>,</span><br><span class="line">    elevation_range=[<span class="number">0</span>, <span class="number">10000</span>],</span><br><span class="line">    getElevation=<span class="string">'counts'</span>,</span><br><span class="line">    getFillColor=<span class="string">'[48, 128, counts*3, 225]'</span>,</span><br><span class="line">    getLineColor=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    pickable=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">st.write(pdk.Deck(</span><br><span class="line">    map_style=<span class="string">"mapbox://styles/mapbox/dark-v10"</span>,</span><br><span class="line">    initial_view_state=view_state,</span><br><span class="line">    layers=[column_layer],</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>在当前的python文件路径下使用cmd输入</p><p><code>streamlit run  you_file_name.py</code></p><h3 id="step7-浏览器打开网址loacalhost：8501"><a href="#step7-浏览器打开网址loacalhost：8501" class="headerlink" title="step7: 浏览器打开网址loacalhost：8501"></a>step7: 浏览器打开<a href="loacalhost：8501">网址loacalhost：8501</a></h3><p><img src="https://s2.ax1x.com/2020/03/03/34oUq1.png" alt="avatar"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd下输入 ctrl+c 可以退出</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从零开始爬取疫情并云端数据可视化&quot;&gt;&lt;a href=&quot;#从零开始爬取疫情并云端数据可视化&quot; class=&quot;headerlink&quot; title=&quot;从零开始爬取疫情并云端数据可视化&quot;&gt;&lt;/a&gt;从零开始爬取疫情并云端数据可视化&lt;/h1&gt;&lt;p&gt;实验OS环境：Win10 /
      
    
    </summary>
    
    
      <category term="数据可视化" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/08/16/%E4%BA%A4%E5%8F%89%E7%86%B5%E4%B8%8E%E5%9F%BA%E4%BA%8E%E4%BA%A4%E5%8F%89%E7%86%B5%E7%9A%84%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/08/16/交叉熵与基于交叉熵的损失函数/</id>
    <published>2019-08-16T06:34:10.612Z</published>
    <updated>2019-08-16T06:34:10.717Z</updated>
    
    <content type="html"><![CDATA[<p>交叉熵与基于交叉熵的损失函数</p><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><p>概念：首先解释解信息熵：<strong>信息熵是用来消除不确定性所需信息的度量</strong>，W（）CA</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交叉熵与基于交叉熵的损失函数&lt;/p&gt;
&lt;h4 id=&quot;交叉熵&quot;&gt;&lt;a href=&quot;#交叉熵&quot; class=&quot;headerlink&quot; title=&quot;交叉熵&quot;&gt;&lt;/a&gt;交叉熵&lt;/h4&gt;&lt;p&gt;概念：首先解释解信息熵：&lt;strong&gt;信息熵是用来消除不确定性所需信息的度量&lt;/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java的HashMap</title>
    <link href="http://yoursite.com/2019/05/14/HashMap/"/>
    <id>http://yoursite.com/2019/05/14/HashMap/</id>
    <published>2019-05-14T06:34:13.427Z</published>
    <updated>2019-05-14T06:47:14.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>主要参数： capacity，loadFactor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">  ↳     java.util.AbstractMap&lt;K, V&gt;</span><br><span class="line">         ↳     java.util.HashMap&lt;K, V&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p> 继承了抽象类AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。</p><p><img src="https://images0.cnblogs.com/blog/497634/201401/280024326252470.jpg" alt="img"></p><p>threshold的值=”容量*加载因子”</p><p>当HashMap中的容量到threshold，重建Hash表，将容量加倍</p><p>table主要存储容器，每个单元Entry都是带hash（int）和next的<key, value>对</key,></p><p><strong>为什么使用hash：</strong> 为了效率</p><p><strong>使用hash会有什么不好的后果</strong> 空间换时间，产生哈希冲突</p><p>HashMap中如何解决这问题：<strong>散列表</strong>—&gt;Entry的next</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h3&gt;&lt;p&gt;主要参数： capacity，loadFactor&lt;/p&gt;
&lt;figure class=&quot;highl
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/05/12/Text%20Classification%20Read%20notes/"/>
    <id>http://yoursite.com/2019/05/12/Text Classification Read notes/</id>
    <published>2019-05-12T08:44:38.195Z</published>
    <updated>2019-05-12T08:44:51.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-Classification-Read-notes"><a href="#Text-Classification-Read-notes" class="headerlink" title="Text Classification Read notes"></a>Text Classification Read notes</h2><p>解决文本分类的问题<br><strong>流程：</strong></p><p>​    特征提取 -&gt;&gt; (特征降维) &gt;&gt; 分类→评估</p><p><img src="C:\Users\ThinkPad\AppData\Roaming\Typora\typora-user-images\1557644929766.png" alt="1557644929766"></p><p>基于机器学习和深度学习都有一个难以避免的特点，就是模型本身的鲁棒性相对不够，但是处理的问题都十分复杂，对文本的预处理十分重要：</p><h3 id="特征提取与清洗"><a href="#特征提取与清洗" class="headerlink" title="特征提取与清洗"></a>特征提取与清洗</h3><p><strong>文本数据的清洗</strong>：</p><pre><code> 1. 分词：Tokenization 2. 去除意义不大的词语{啊，一，后，前} 3. 大小写问题解决 4. 口语化和简称 5. 降噪{不必要的标点} 6. 语法错误 7. 词语的时态 8. 还原词形</code></pre><p><strong>词语的语法分析</strong></p><pre><code>1. N-Gram</code></pre><p><strong>加权词语</strong></p><pre><code>1. 词袋模型（不计算顺序与上下文，将所有的 词扔进一个袋子中，附送的都是出现次数，基于单热编码） 2. 词向量模型（神经忘录得到高位向量，具有上下文信息，但是并不能包含长连续全部的语义）</code></pre><p>此处注意的事：并不是词向量（word2Vec）就是最好的，在贝叶斯邮件分类，文本分类中，词袋模型的下效率高，仅仅有文章的内容信息，鲁棒性更好</p><h3 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h3><ol><li>PCA 主成分分析法应用非常广</li><li>ICA 独立成分分析，在线性的模型中应用多</li><li>LDA ，NMF</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Text-Classification-Read-notes&quot;&gt;&lt;a href=&quot;#Text-Classification-Read-notes&quot; class=&quot;headerlink&quot; title=&quot;Text Classification Read notes&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>隐马尔克夫模型的一些概念</title>
    <link href="http://yoursite.com/2019/04/30/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%85%8B%E5%A4%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/04/30/隐马尔克夫模型的一些概念/</id>
    <published>2019-04-30T05:49:35.732Z</published>
    <updated>2020-03-03T14:02:18.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马尔克夫模型的一些概念"><a href="#马尔克夫模型的一些概念" class="headerlink" title="马尔克夫模型的一些概念"></a>马尔克夫模型的一些概念</h3><p><strong>状态链</strong>：今天的天气：{Sun, Cloud,Rain}<br><strong>观察链</strong>：今天的干湿度：{Soggy， Damp， Dryish， Dry}</p><p><img src="http://www.leexiang.com/wp-content/uploads/ckfinder/images/hidden-weather-example.gif" alt="1556604603432"><br><strong>Assumptions</strong>: 今天的干湿度状态决定(天气状态)， 明天的天气只与今天的天气有关<br><strong>Define</strong>：<br>    状态初始概率：</p><script type="math/tex; mode=display">\pi_i=P{(y_i = S_i)}  1<i<N</script><p>状态转移概率：</p><script type="math/tex; mode=display">a_{ij} = P(y_{t+1}=S_j|y_t=S_i),      1\leq i,j\leq N</script><p>输出观测概率</p><script type="math/tex; mode=display">b_{ij} = P(x_t=O_j | y_t =S_i),  1 \leq i\leq N,  1\leq j\leq M</script><p>要求的输出：</p><script type="math/tex; mode=display">P(y_i = S_i, x_j = O_j) =\pi_i *b_{ij}</script><script type="math/tex; mode=display">P(y_{i+1} = S_p,x_{j+1}=O_q) = a_{ip}*\pi_i*b_{i+1，j+1}</script><p>解决三种问题：</p><ol><li>有一个词典的统计数据可以得到模型<code>{A,B,Π}</code> ，可以得到观察序列，想知道隐藏序列，<code>语音识别，词性标注</code></li><li>得到模型，知道状态序列，想预测概率最大的观察序列</li><li>如何训练得到一个比较好的模型</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;a href=&quot;#马尔克夫模型的一些概念&quot; class=&quot;headerlink&quot; title=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;/a&gt;马尔克夫模型的一些概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;状态链&lt;/strong&gt;：今天的天气：{Sun, C
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java开发的几条重要原则</title>
    <link href="http://yoursite.com/2019/04/29/JAVA%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E6%9D%A1%E9%87%8D%E8%A6%81%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/29/JAVA开发的几条重要原则/</id>
    <published>2019-04-29T05:36:43.625Z</published>
    <updated>2019-04-30T07:12:47.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA开发的几条重要原则"><a href="#JAVA开发的几条重要原则" class="headerlink" title="JAVA开发的几条重要原则"></a>JAVA开发的几条重要原则</h1><ol><li><p>在大型项目中使用log的门面模式，而不能直接调用log4的api</p></li><li><p>boolean 变量不要增加isOK这样的，直接写OK，否则序列化会产生灵异问题</p></li><li>Boolean是boolean的封装， 在pojo和trs框架中使用Boolean可以发现异常，及时停止程序，在返回值的时候考虑到Boolean带来的null，直接用boolean会减少很多null处理工作</li><li>在for循环中少量使用“+”来拼接字符串，使用join或其他的</li><li>使用foreach循环可以简洁，但是注意本质基于迭代器的while循环，不要在foreach中使用add，和remove对象</li><li>hashmap中如果设置一个初始化容量，可以提高效率</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;a href=&quot;#JAVA开发的几条重要原则&quot; class=&quot;headerlink&quot; title=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;/a&gt;JAVA开发的几条重要原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在大型项目中使用log的门面模式，
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的装箱与拆箱</title>
    <link href="http://yoursite.com/2019/04/28/Java%E7%9A%84%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/"/>
    <id>http://yoursite.com/2019/04/28/Java的装箱与拆箱/</id>
    <published>2019-04-28T03:33:12.197Z</published>
    <updated>2019-04-28T03:44:17.214Z</updated>
    
    <content type="html"><![CDATA[<p>主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力</p><h1 id="Java的装箱与拆箱"><a href="#Java的装箱与拆箱" class="headerlink" title="Java的装箱与拆箱"></a>Java的装箱与拆箱</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中的基本数据类型共有八种，分为数值型，字符型， 布尔型</p><ol><li><p>字符类型： char</p></li><li><p>布尔类型： boolean</p></li><li><p>数据类型： int， float， double， byte， short， long</p></li></ol><p>与C#有所不同<br>      Java是一种全面向对象的语言，和C#一样都是对象全在堆里面，然后C#就是数值类型和引用类型，Java就搞出来了基本类型和对象类型<br>      Java和C++的基本数值类型也不一样，Java的数值都没有无符号这一说，这也是要全平台运行的设计需求决定的，程序设计者也不想考虑在某个平台上的运行错误。因为数值类型不存储在栈里就会变慢，但是这样就会导致溢出，所以为了想两全其美 ，只有把基本数据类型封装成一种类，这样就给程序设计人员一种方式来处理更复杂情况下的数据。</p><p>如果计算发生了溢出如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = Integer.MAX_VALUE;</span><br><span class="line">   <span class="keyword">int</span> j = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> k = i + j;</span><br><span class="line">   System.out.println(<span class="string">"i ("</span> + i + <span class="string">") + j ("</span> + j + <span class="string">") = k ("</span> + k + <span class="string">")"</span>);</span><br></pre></td></tr></table></figure><p>输出结果： i (2147483647) + j (2147483647) = k (-2)</p><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>为了解决基本数据类型会产生溢出的现象，将基本类型封装成为一个类</p><div class="table-container"><table><thead><tr><th>基本数据类型</th><th>包装后的类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr></tbody></table></div><p>注意：变量名小写，类名大写</p><p>毫无疑问，全面向对象的语言有一个特点，就是什么都是对象，显然这是一种理想的状态，丰富的数据类型，才可以面对丰富的情况，类：丰富的属性和方法，全都继承于object，更多的扩展性带来了效率的低下，相比基本类型更快，好用，但是扩展性低。</p><p>将存在栈内的的数据变成存在堆中的对象，Java SE5 以上的版本增加了自动装箱技术；在C#中也可以进行相似的转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i =<span class="number">10</span>;  <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> b= i;     <span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><p>c#中的装箱如下，需要注意的是，本质上只是创建了一个object的副本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 10;</span><br><span class="line">object oi = i;</span><br><span class="line">int j = (int) oi;</span><br></pre></td></tr></table></figure><h3 id="自动装箱下的实际操作"><a href="#自动装箱下的实际操作" class="headerlink" title="自动装箱下的实际操作"></a>自动装箱下的实际操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">50</span>; i ++)&#123;</span><br><span class="line">    li.add(i); <span class="comment">//实际的操作： li.add(Integer.valueOf(i));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在大型计算中，注意不要进行integer的复杂计算，否则会带来自动拆箱的效率问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line">  Integer j = Integer.valueOf(<span class="number">20</span>);</span><br><span class="line">  System.out.println(i.intValue() + j.intValue());</span><br></pre></td></tr></table></figure><p>以及<code>flage？(integer)i：(int)j;</code> 如果i是null会导致空指针异常<code>nullPointerError</code>  </p><h3 id="自动装箱带来的问题"><a href="#自动装箱带来的问题" class="headerlink" title="自动装箱带来的问题"></a>自动装箱带来的问题</h3><p>当然，自动拆装箱是一个很好的功能，大大节省了开发人员的精力，不再需要关心到底什么时候需要拆装箱。但是，他也会引入一些问题。</p><blockquote><p>包装对象的数值比较，不能简单的使用<code>==</code>，虽然-128到127之间的数字可以，但是这个范围之外还是需要使用<code>equals</code>比较。</p><p>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为null，那么自动拆箱时就有可能抛出NPE。</p><p>如果一个for循环中有大量拆装箱操作，会浪费很多资源。</p></blockquote><p>参考资料 <a href="https://www.hollischuang.com/archives/2700" target="_blank" rel="noopener">一文读懂什么是Java中的自动拆装箱</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力&lt;/p&gt;
&lt;h1 id=&quot;Java的装箱与拆箱&quot;&gt;&lt;a href=&quot;#Java的装箱与拆箱&quot; class=&quot;headerlink&quot; title=&quot;Java的装箱与拆箱&quot;&gt;&lt;/a&gt;Java的装箱与拆箱&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/27/hello-world/"/>
    <id>http://yoursite.com/2019/04/27/hello-world/</id>
    <published>2019-04-27T08:38:40.233Z</published>
    <updated>2019-04-27T08:38:40.233Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="http://yoursite.com/2018/08/30/Test/"/>
    <id>http://yoursite.com/2018/08/30/Test/</id>
    <published>2018-08-30T10:31:53.000Z</published>
    <updated>2019-04-28T03:39:18.861Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a test blog&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
