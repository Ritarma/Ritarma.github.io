<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ritarma</title>
  
  <subtitle>blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-30T08:08:40.612Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ritarma Arthur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隐马尔克夫模型的一些概念</title>
    <link href="http://yoursite.com/2019/04/30/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%85%8B%E5%A4%AB%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/04/30/隐马尔克夫模型的一些概念/</id>
    <published>2019-04-30T05:49:35.732Z</published>
    <updated>2019-04-30T08:08:40.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="马尔克夫模型的一些概念"><a href="#马尔克夫模型的一些概念" class="headerlink" title="马尔克夫模型的一些概念"></a>马尔克夫模型的一些概念</h3><p><strong>状态链</strong>：小明今天手感主要依靠今天有没有出太阳<br><strong>观察链</strong>：小明今天的胜率<img src="H:\GIT\hexotext\source\_posts\pic\1556604603432.png" alt="1556604603432"><br><strong>Assumptions</strong>: 小明今天的胜率仅由手感状态决定(天气状态)， 明天的天气只与今天的天气有关<br><strong>Define</strong>：<br>    状态初始概率：<br>$$<br>\pi_i=P{(y_i = S_i)}  1&lt;i&lt;N<br>$$<br>    状态转移概率：<br>$$<br>a_{ij} = P(y_{t+1}=S_j|y_t=S_i),      1\leq i,j\leq N<br>$$<br>    输出观测概率<br>$$<br>b_{ij} = P(x_t=O_j | y_t =S_i),  1 \leq i\leq N,  1\leq j\leq M<br>$$<br>    要求的输出：<br>$$<br>P(y_i = S_i, x_j = O_j) =\pi_i <em>b_{ij}<br>$$<br>$$<br>P(y_{i+1} = S_p,x_{j+1}=O_q) = a_{ip}</em>\pi_i*b_{i+1，j+1}<br>$$</p><p>解决三种问题：</p><ol><li>有一个词典的统计数据可以得到模型<code>{A,B,Π}</code> ，可以得到观察序列，想知道隐藏序列，<code>语音识别，词性标注</code></li><li>得到模型，知道状态序列，想预测概率最大的观察序列</li><li>如何训练得到一个比较好的模型</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;a href=&quot;#马尔克夫模型的一些概念&quot; class=&quot;headerlink&quot; title=&quot;马尔克夫模型的一些概念&quot;&gt;&lt;/a&gt;马尔克夫模型的一些概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;状态链&lt;/strong&gt;：小明今天手感主要依靠今天有
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java开发的几条重要原则</title>
    <link href="http://yoursite.com/2019/04/29/JAVA%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E6%9D%A1%E9%87%8D%E8%A6%81%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/04/29/JAVA开发的几条重要原则/</id>
    <published>2019-04-29T05:36:43.625Z</published>
    <updated>2019-04-30T07:12:47.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA开发的几条重要原则"><a href="#JAVA开发的几条重要原则" class="headerlink" title="JAVA开发的几条重要原则"></a>JAVA开发的几条重要原则</h1><ol><li><p>在大型项目中使用log的门面模式，而不能直接调用log4的api</p></li><li><p>boolean 变量不要增加isOK这样的，直接写OK，否则序列化会产生灵异问题</p></li><li>Boolean是boolean的封装， 在pojo和trs框架中使用Boolean可以发现异常，及时停止程序，在返回值的时候考虑到Boolean带来的null，直接用boolean会减少很多null处理工作</li><li>在for循环中少量使用“+”来拼接字符串，使用join或其他的</li><li>使用foreach循环可以简洁，但是注意本质基于迭代器的while循环，不要在foreach中使用add，和remove对象</li><li>hashmap中如果设置一个初始化容量，可以提高效率</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;a href=&quot;#JAVA开发的几条重要原则&quot; class=&quot;headerlink&quot; title=&quot;JAVA开发的几条重要原则&quot;&gt;&lt;/a&gt;JAVA开发的几条重要原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在大型项目中使用log的门面模式，
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java的装箱与拆箱</title>
    <link href="http://yoursite.com/2019/04/28/Java%E7%9A%84%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/"/>
    <id>http://yoursite.com/2019/04/28/Java的装箱与拆箱/</id>
    <published>2019-04-28T03:33:12.197Z</published>
    <updated>2019-04-28T03:44:17.214Z</updated>
    
    <content type="html"><![CDATA[<p>主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力</p><h1 id="Java的装箱与拆箱"><a href="#Java的装箱与拆箱" class="headerlink" title="Java的装箱与拆箱"></a>Java的装箱与拆箱</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>Java中的基本数据类型共有八种，分为数值型，字符型， 布尔型</p><ol><li><p>字符类型： char</p></li><li><p>布尔类型： boolean</p></li><li><p>数据类型： int， float， double， byte， short， long</p></li></ol><p>与C#有所不同<br>      Java是一种全面向对象的语言，和C#一样都是对象全在堆里面，然后C#就是数值类型和引用类型，Java就搞出来了基本类型和对象类型<br>      Java和C++的基本数值类型也不一样，Java的数值都没有无符号这一说，这也是要全平台运行的设计需求决定的，程序设计者也不想考虑在某个平台上的运行错误。因为数值类型不存储在栈里就会变慢，但是这样就会导致溢出，所以为了想两全其美 ，只有把基本数据类型封装成一种类，这样就给程序设计人员一种方式来处理更复杂情况下的数据。</p><p>如果计算发生了溢出如图所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = Integer.MAX_VALUE;</span><br><span class="line">   <span class="keyword">int</span> j = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> k = i + j;</span><br><span class="line">   System.out.println(<span class="string">"i ("</span> + i + <span class="string">") + j ("</span> + j + <span class="string">") = k ("</span> + k + <span class="string">")"</span>);</span><br></pre></td></tr></table></figure><p>输出结果： i (2147483647) + j (2147483647) = k (-2)</p><h2 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h2><p>为了解决基本数据类型会产生溢出的现象，将基本类型封装成为一个类</p><table><thead><tr><th>基本数据类型</th><th>包装后的类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr></tbody></table><p>注意：变量名小写，类名大写</p><p>毫无疑问，全面向对象的语言有一个特点，就是什么都是对象，显然这是一种理想的状态，丰富的数据类型，才可以面对丰富的情况，类：丰富的属性和方法，全都继承于object，更多的扩展性带来了效率的低下，相比基本类型更快，好用，但是扩展性低。</p><p>将存在栈内的的数据变成存在堆中的对象，Java SE5 以上的版本增加了自动装箱技术；在C#中也可以进行相似的转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i =<span class="number">10</span>;  <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> b= i;     <span class="comment">//自动拆箱</span></span><br></pre></td></tr></table></figure><p>c#中的装箱如下，需要注意的是，本质上只是创建了一个object的副本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = 10;</span><br><span class="line">object oi = i;</span><br><span class="line">int j = (int) oi;</span><br></pre></td></tr></table></figure><h3 id="自动装箱下的实际操作"><a href="#自动装箱下的实际操作" class="headerlink" title="自动装箱下的实际操作"></a>自动装箱下的实际操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">50</span>; i ++)&#123;</span><br><span class="line">    li.add(i); <span class="comment">//实际的操作： li.add(Integer.valueOf(i));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在大型计算中，注意不要进行integer的复杂计算，否则会带来自动拆箱的效率问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = Integer.valueOf(<span class="number">10</span>);</span><br><span class="line">  Integer j = Integer.valueOf(<span class="number">20</span>);</span><br><span class="line">  System.out.println(i.intValue() + j.intValue());</span><br></pre></td></tr></table></figure><p>以及<code>flage？(integer)i：(int)j;</code> 如果i是null会导致空指针异常<code>nullPointerError</code>  </p><h3 id="自动装箱带来的问题"><a href="#自动装箱带来的问题" class="headerlink" title="自动装箱带来的问题"></a>自动装箱带来的问题</h3><p>当然，自动拆装箱是一个很好的功能，大大节省了开发人员的精力，不再需要关心到底什么时候需要拆装箱。但是，他也会引入一些问题。</p><blockquote><p>包装对象的数值比较，不能简单的使用<code>==</code>，虽然-128到127之间的数字可以，但是这个范围之外还是需要使用<code>equals</code>比较。</p><p>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为null，那么自动拆箱时就有可能抛出NPE。</p><p>如果一个for循环中有大量拆装箱操作，会浪费很多资源。</p></blockquote><p>参考资料 <a href="https://www.hollischuang.com/archives/2700" target="_blank" rel="noopener">一文读懂什么是Java中的自动拆装箱</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要是阅读一些基本Java编程规范的读书笔记，第一次写博客，还需要多多努力&lt;/p&gt;
&lt;h1 id=&quot;Java的装箱与拆箱&quot;&gt;&lt;a href=&quot;#Java的装箱与拆箱&quot; class=&quot;headerlink&quot; title=&quot;Java的装箱与拆箱&quot;&gt;&lt;/a&gt;Java的装箱与拆箱&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/27/hello-world/"/>
    <id>http://yoursite.com/2019/04/27/hello-world/</id>
    <published>2019-04-27T08:38:40.233Z</published>
    <updated>2019-04-27T08:38:40.233Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="http://yoursite.com/2018/08/30/Test/"/>
    <id>http://yoursite.com/2018/08/30/Test/</id>
    <published>2018-08-30T10:31:53.000Z</published>
    <updated>2019-04-28T03:39:18.861Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a test blog&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
